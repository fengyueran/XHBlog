{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jekyll-search.js","path":"js/jekyll-search.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/tagcloud.js","path":"js/tagcloud.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/assets/weixin.png","path":"assets/weixin.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1515489628000},{"_id":"themes/jacman/README_zh.md","hash":"0854e4c96f53005f3a47e21af3f8aee361719ce4","modified":1515493738000},{"_id":"themes/jacman/README.md","hash":"79be8a49927c8666f1804d7ccd08af8d3268062a","modified":1515493738000},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1515493738000},{"_id":"themes/jacman/_config.yml","hash":"c97a9cd0afb133e1a07dc91c785dc67bb8869dad","modified":1518433912000},{"_id":"themes/jacman/_config_me.yml","hash":"dc81ad6a6ac14211fe1613fadf132ff28236ea99","modified":1515493738000},{"_id":"source/.DS_Store","hash":"4c3ec30002feadf55ed09a6212c1bc78efdd510a","modified":1528704420000},{"_id":"themes/jacman/.DS_Store","hash":"b0456f5c9aa85a8f5faa62f35dc373e0dac161e5","modified":1518425373000},{"_id":"source/about/index.md","hash":"e71e439e33d5a8626aaf70debacc55b037625116","modified":1520935755000},{"_id":"source/_posts/git submodule的使用.md","hash":"3d93c721edfb1a591b755ffb3b57fb29a35ce598","modified":1530856774000},{"_id":"source/_posts/git的常用命令简介.md","hash":"9788bc9f6f7437e519daa4333cbe2f3fa66299d9","modified":1530856774000},{"_id":"source/_posts/react最佳实践.md","hash":"deee970f99bdf339609dc8ad8657cfdb70473d34","modified":1525670681000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1519281450000},{"_id":"source/_posts/正则表达式.md","hash":"f72033b66bfec3099e3104faac03de12ebe05e36","modified":1530260463000},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1515493738000},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1515493738000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1515493738000},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1515493738000},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1515493738000},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1515493738000},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1515493738000},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1515493738000},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1515493738000},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1515493738000},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1515493738000},{"_id":"themes/jacman/source/CNAME","hash":"a7d7367dbda80b03747a09e014f28072e97a1116","modified":1520935755000},{"_id":"themes/jacman/source/.DS_Store","hash":"3079897bc15a191bc2d42b946640a4284a27e3dd","modified":1515492129000},{"_id":"themes/jacman/.git/config","hash":"2d3ae691d19a816889480acb832a3813f5ad7605","modified":1515489628000},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1515489628000},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515489624000},{"_id":"themes/jacman/.git/index","hash":"60497f21aab29fc6e73591ed31d8f3c51df9126c","modified":1515489629000},{"_id":"themes/jacman/.git/packed-refs","hash":"eb948a69bbff23c124d0145a66341b1af0f885d9","modified":1515489628000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"3703332570aa1d95403db19d91e1d06c3c41a164","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"495d793ea9d7f367a8996106da952f687e0910e7","modified":1520935755000},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"62c20e9873221eed8d4ebbe408c991746279e7c0","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/sponsor.ejs","hash":"683d1a19b404ea2d67db37b22ec56b47dd0bd854","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1515493738000},{"_id":"themes/jacman/layout/_widget/weixin.ejs","hash":"a6aac8b82d00581af8d1853359be19345d088a1c","modified":1518435063000},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1515493738000},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1520935755000},{"_id":"themes/jacman/source/css/.DS_Store","hash":"9c7e4e0c9e06a16717e285d136648036f97626c7","modified":1515494855000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1520935755000},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1520935755000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1520935755000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1520935755000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1520935755000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1520935755000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1520935755000},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1520935755000},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1520935755000},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1520935755000},{"_id":"themes/jacman/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515492878000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1515493738000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1515493738000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1515493738000},{"_id":"themes/jacman/source/img/author.jpg","hash":"b03bdafababe1dd3bb533719518e0a2d66b51b9d","modified":1515491675000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1515493738000},{"_id":"themes/jacman/source/img/favicon.ico","hash":"df5708b7258bd6e690d8883c954152c8636cfa65","modified":1515491675000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1515493738000},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1515493738000},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1515493738000},{"_id":"themes/jacman/source/img/favicon.png","hash":"6658b5a8bbe2a31ceea767cdc28faedddd289285","modified":1515493738000},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1515493738000},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1515493738000},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1520935755000},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1515493738000},{"_id":"themes/jacman/source/img/logo.png","hash":"b03bdafababe1dd3bb533719518e0a2d66b51b9d","modified":1515491675000},{"_id":"themes/jacman/source/js/jekyll-search.js","hash":"b80e71eb664e5ed8545a887a073aa9fc5ee3fca2","modified":1520935755000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1520935755000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1520935755000},{"_id":"themes/jacman/source/js/tagcloud.js","hash":"3adec98f4a68d40ecc2583769c48278a90421dd2","modified":1520935755000},{"_id":"themes/jacman/source/js/toc.js","hash":"0451f0c1dc475186067cc19afc20c8e9ad3f02d7","modified":1520935755000},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1520935755000},{"_id":"themes/jacman/.git/logs/HEAD","hash":"9d5d543d22974be80223ae695099b8e99241e96a","modified":1515489628000},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1515489624000},{"_id":"themes/jacman/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1515489624000},{"_id":"themes/jacman/source/assets/weixin.png","hash":"859cd451ffc3becad71e2550cd0fe4130e070a6d","modified":1520935755000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1520935755000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1520935755000},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1520935755000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1520935755000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"14a40545bde669af917c6d0d1df6188240a901f8","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1515493738000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1515493738000},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1515493738000},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f56ba7e551a7a2847411a9eb8f1a29b89abcfa10","modified":1518173910000},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1515493738000},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1515493738000},{"_id":"themes/jacman/source/css/_base/.DS_Store","hash":"0c6042ed0973cfb03f4dfc82bc3ea220bbbcdf3d","modified":1515495117000},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1515493738000},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"fbd8d10e6dbf8c94bd09aa0fb456f23b2f02a9ea","modified":1515493738000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1515493738000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1515493738000},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"1c5755a290ed271f7ce8e5d14a68aace80a701c7","modified":1520935755000},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1515493738000},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1515493738000},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1515493738000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1520935755000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1520935755000},{"_id":"themes/jacman/source/img/banner.jpg","hash":"650f9ffce2ba4a7d73defc464e483daf048edd07","modified":1518435504000},{"_id":"themes/jacman/.git/refs/heads/master","hash":"cdf7ebb26811b17304103dcf164bb82b88b4f841","modified":1515489628000},{"_id":"themes/jacman/.git/objects/pack/pack-debd836f9f2ddd8662fa6b64ca7c962662bc6032.idx","hash":"b3f64d39018722f4e2ccc9cef0b8bec00f0de9c8","modified":1515489628000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1520935755000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1515493738000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1515493738000},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"9d5d543d22974be80223ae695099b8e99241e96a","modified":1515489628000},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515489628000},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"9d5d543d22974be80223ae695099b8e99241e96a","modified":1515489628000},{"_id":"themes/jacman/.git/objects/pack/pack-debd836f9f2ddd8662fa6b64ca7c962662bc6032.pack","hash":"7b8132c44084a29c2ac01efbd6ced55f9412a394","modified":1515489628000},{"_id":"public/about/index.html","hash":"4b65230bb51a089e39b189f5f9bce7d1f906fab6","modified":1530857047984},{"_id":"public/index.html","hash":"a3cfdfd0fe14e2dd006e6e7e4e5550f6a576671a","modified":1530857047995},{"_id":"public/categories/Git/index.html","hash":"5e5a5ff76bb7b882d6d784372d30ccd34576d83c","modified":1530857047996},{"_id":"public/archives/index.html","hash":"5dbcb88dc9f24f0cbcf86bea2312d191d4da5277","modified":1530857047996},{"_id":"public/categories/react/index.html","hash":"5f28898ad83a215dc4a668fd2ae8d5fdba53173a","modified":1530857047996},{"_id":"public/archives/2016/index.html","hash":"94c5f9e19e6f6ff8fb7e3388ef73592f3e7d8ac4","modified":1530857047996},{"_id":"public/archives/2017/index.html","hash":"1fa191e461bf49b2cae22020cfb04976f8c67f9e","modified":1530857047996},{"_id":"public/archives/2016/07/index.html","hash":"31089861dd2a56d23c2ca3ef909c9180ebd15bc6","modified":1530857047996},{"_id":"public/archives/2016/06/index.html","hash":"c110d8d36564f6f186097267c640720162c7deda","modified":1530857047996},{"_id":"public/archives/2017/07/index.html","hash":"09c064f3f4d55135a5bad6714e4bf48fd77abbdd","modified":1530857047996},{"_id":"public/tags/Git/index.html","hash":"bd5d7aae6b9d6635c683683ca50fba7e5ec6d1df","modified":1530857047996},{"_id":"public/tags/react/index.html","hash":"b4b13fcf8b687ea3705b89d5d345f984669e9c2b","modified":1530857047996},{"_id":"public/2017/07/24/react最佳实践/index.html","hash":"54c662994bd973db97e92a3fabf382ed5fb0d1cf","modified":1530857047996},{"_id":"public/2016/07/24/git submodule的使用/index.html","hash":"baf343d0aab86ab6db7952772ec60a5ad0b9f74f","modified":1530857047996},{"_id":"public/2016/06/24/git的常用命令简介/index.html","hash":"d1b9bbac4e4d88ec1016a47293faf6d034864780","modified":1530857047997},{"_id":"public/categories/JS/index.html","hash":"d416c79d83713c47a29b96ee27837ede2313e016","modified":1530857048001},{"_id":"public/tags/JS/index.html","hash":"7ddc59954896864d6bddec553de9e29e3ecbd3a9","modified":1530857048001},{"_id":"public/2017/07/24/正则表达式/index.html","hash":"0bd5e7559165ae406d337368c0ecdd829f4ab811","modified":1530857048001},{"_id":"public/CNAME","hash":"a7d7367dbda80b03747a09e014f28072e97a1116","modified":1530857048001},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1530857048001},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1530857048001},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1530857048001},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1530857048001},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1530857048001},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1530857048001},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1530857048002},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1530857048002},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1530857048002},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1530857048002},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1530857048002},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1530857048002},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1530857048002},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1530857048002},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1530857048003},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1530857048003},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1530857048003},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1530857048003},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1530857048003},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1530857048003},{"_id":"public/img/favicon.ico","hash":"df5708b7258bd6e690d8883c954152c8636cfa65","modified":1530857048003},{"_id":"public/img/author.jpg","hash":"b03bdafababe1dd3bb533719518e0a2d66b51b9d","modified":1530857048003},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1530857048003},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1530857048003},{"_id":"public/img/favicon.png","hash":"6658b5a8bbe2a31ceea767cdc28faedddd289285","modified":1530857048003},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1530857048003},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1530857048004},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1530857048004},{"_id":"public/img/logo.png","hash":"b03bdafababe1dd3bb533719518e0a2d66b51b9d","modified":1530857048004},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1530857048004},{"_id":"public/assets/weixin.png","hash":"859cd451ffc3becad71e2550cd0fe4130e070a6d","modified":1530857048545},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1530857048547},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1530857048547},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1530857048553},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1530857048582},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1530857048582},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1530857048582},{"_id":"public/js/tagcloud.js","hash":"3adec98f4a68d40ecc2583769c48278a90421dd2","modified":1530857048582},{"_id":"public/js/toc.js","hash":"0451f0c1dc475186067cc19afc20c8e9ad3f02d7","modified":1530857048583},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1530857048583},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1530857048583},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1530857048583},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1530857048583},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1530857048583},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1530857048583},{"_id":"public/css/style.css","hash":"3a41aec96dd139ce1be346b354e4a76ee3ed06cb","modified":1530857048583},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1530857048583},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1530857048583},{"_id":"public/js/jekyll-search.js","hash":"b80e71eb664e5ed8545a887a073aa9fc5ee3fca2","modified":1530857048583},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1530857048583},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1530857048583},{"_id":"public/img/banner.jpg","hash":"650f9ffce2ba4a7d73defc464e483daf048edd07","modified":1530857048583},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1530857048586}],"Category":[{"name":"Git","_id":"cjj9krdp20003io0rl8c1y2ct"},{"name":"react","_id":"cjj9krdp9000aio0r4nhcy2v5"},{"name":"JS","_id":"cjj9krdpa000fio0rvadeplww"}],"Data":[],"Page":[{"layout":"page","type":"page","title":"About me","_content":"\n80末程序员...\n微信:\n![](../assets/weixin.png)","source":"about/index.md","raw":"---\nlayout: page\ntype: page\ntitle: About me\n---\n\n80末程序员...\n微信:\n![](../assets/weixin.png)","date":"2018-03-13T10:09:15.000Z","updated":"2018-03-13T10:09:15.000Z","path":"about/index.html","comments":1,"_id":"cjj9krdow0000io0r6dbq5qak","content":"<p>80末程序员…<br>微信:<br><img src=\"../assets/weixin.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>80末程序员…<br>微信:<br><img src=\"../assets/weixin.png\" alt=\"\"></p>\n"}],"Post":[{"layout":"post","title":"Git submodule的使用","tagline":"Supporting tagline","description":"最近在做一个上传的客户端，上传的部分由后端同学以SDK的方式提供，因此该SDK是在一个独立的仓库，那么对于客户端该如何方便的对集成该SDK呢？这就可以考虑用git的submodule。","date":"2016-07-24T15:30:09.000Z","_content":"\n### **遇到的问题**\n\n最近在做一个上传的客户端，上传的部分由后端同学以SDK的方式提供，因此该SDK是在一个独立的仓库，那么对于客户端该如何方便的集成该SDK呢？每次SDK更新把代码拷贝到客户端仓库？把SDK发布到npm？显然都不合理，这就可以考虑用git的submodule。\n\n### **什么是submodule**\n\nsubmodule是一个多项目管理工具，它允许将子项目以独立的git项目添加到主项目，而主项目以submodule的形式拥有子项目。子项目拥有自己的commit、push、pull，而与主项目互不干扰。主项目只需要记录子项目的地址和所需要的commit id，通过地址和commit id 就能够得到对应的子项目。\n\n### **添加submodule**\n通常情况下，我们都有一个主项目(MainProject)，在MainProject文件夹下执行如下命令，即可添加submodule。\n```\n$ git add submodule [url] [path]\n//url为子项目远程地址或本地地址, path为子项目路径，可省略\n例: git add submodule git@github.com:fengyueran/UploaderSDK.git ./src/UploaderSDK\n```\ngit status可以看到如下信息\n```\n On branch master\n    Changes to be committed:\n    \n        new file:   .gitmodules\n        new file:   UploaderSDK\n```\n可以看到多了两个个文件.gitmodules和UploaderSDK。\ncat .gitmodules看到.gitmodules储存了submodule的路径及远程地址。\n```\n[submodule \"src/uploaderSDK\"]\n\tpath = src/uploaderSDK\n\turl = git@github.com:fengyueran/UploaderSDK.git\n```\nUploaderSDK的内容为submodule的commit id。\n```\nSubproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089\n```\n不难想象通过.gitmodules和UploaderSDK的信息就可以拿到submodule的内容了，因此我们需要提交这个两个文件。\n```\ngit add .\ngit commit -m \"add submodule\"\n```\n\n### **克隆带有submodule的项目**\n\n主要有两个方式\n\n**1. 采用先克隆后更新的方式**\n\n和想象中的不一样，直接clone主项目，submodule并不会跟着clone下来，而只有包含submodule名的空文件夹。\n```\n1）$ git clone git@github.com:fengyueran/MainProject.git\n```\n需再执行如下命令\n```\n2）$ git submodule init\n```\n输出如下，可以看到该命令给子项目注册了路径，即在主项目中的位置。此时，uploaderSDK文件夹仍未空。\n```\n    \n    Submodule 'src/uploaderSDK' (git@github.com:fengyueran/UploaderSDK.git) registered for path 'src/uploaderSDK'\n```\n\b再执行\n```\n//该命令\b并不是直接更新到最新的submodule commit，而是更新至主项目\b所存储存的commit(有可能是较旧的commit)。\n3）$ git submodule update\n```\n输出如下，可以看到sumodule得到更新，更新到主项目存储的submodule commit，是一个游离的git header。\n  ```\n  Cloning into '/Work/test/MainProject/tmp/MainProject/src/uploaderSDK'...\n\n  Submodule path 'src/uploaderSDK': checked out '6b53e1840b27ca1587b96c1eb9dd5f4ff0866089'\n  ```\n\n\n**2. 采用递归参数--recursive**\n\n```\ngit clone git@github.com:fengyueran/MainProject.git --recursive\n```\n输出如下，可以看到主项目包括submodule都被clone下来了。\n```\nCloning into 'MainProject'...\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (4/4), done.\nReceiving objects: 100% (7/7), done.\nremote: Total 7 (delta 0), reused 4 (delta 0), pack-reused 0\nSubmodule 'src/uploaderSDK' (git@github.com:fengyueran/UploaderSDK.git) registered for path 'src/uploaderSDK'\nCloning into '/Work/test/MainProject/tmp/MainProject/tmp/MainProject/src/uploaderSDK'...\nSubmodule path 'src/uploaderSDK': checked out '6b53e1840b27ca1587b96c1eb9dd5f4ff0866089'\n```\n\n### **修改更新submodule**\n\n主要有两种情况\n\n**1. 直接在主项目中的submodule下修改**\n\n如上例，直接在MainProject下的src/uploaderSDK中修改，uploaderSDK切换到工作分支，修改并提交后，可以checkout到最新的commit，也可以不切，反正都在当前最新的commit上(如果想测试其他commit也可以切换到相应commit上)，此时MainProject中我们可以看到src/uploaderSDK的commit有如下变化，a4d6为修改的提交，需要注意的地方是此时submodule已经在最新的commit上了，不要再在MainProject中git submodule update进行更新了，如果进行此操作submodule又会回到原来的commit(带有减号的commit)，只需要在MainProject提交，并在必要的时候push到远程仓库。这种方法，非submodule的开发人员就不用关心submodule是否更新了，只需要在MainProject下pull代码发现submodule有更改时执行git submodule update(更新为带减号commit)进行更新，前提是其他开发人员提交了正确的submodule commit。\n```差点\n-Subproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089\n+Subproject commit a4d6dc0457673a275b1f6cbeda6f8ff23293b9de\n```\n**2. 在submodule自己独立的仓库进行修改**\n\n在工作目录克隆下submodule的仓库，切换到工作分支进行修改提交并push到远程仓库。这种方法需要submodule开发人员告诉MainProject的开发人员submodule有更新或主动查看是否有更新，有更新时就在MainProject的src/uploaderSDK下pull远程代码(需要知道submodule的工作分支)，快速合并后，uploaderSDK的commit有如下变化，此时同1不要git submodule update，而只是在MainProject下提交这个更改。\n```\n-Subproject commit f4573cc1bb50000779202c7f56a640b1ffc075cb\n+Subproject commit 64ae6d149c0f6e3b06b8cea262c6126a7bc0887f\n\n```\n\n### **删除submodule**\n\n执行如下命令\n\n1) $ git submodule deinit \n```\n逆初始化模块，submodule为子模块目录，执行后可发现子模块目录被清空\n$ git submodule deinit [submodule_name] \n-> Cleared directory 'test2sub'\nSubmodule 'test2sub' (git@github.com:fengyueran/test2sub.git) unregistered for path 'test2sub'\n\n//执行如下命令还能看到子项目信息\n$ git submodule\n-> -dab52c62f52353d9967619625c28e28dc4320aef test2sub\n```\n2) $ git rm --cached [submodule_name]\n```\n// 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）\ngit rm --cached test2sub\n//执行如下命令已看看不到删除的子项目信息了\n$ git submodule\n```\n3）$ git commit\n```\ngit commit -m \"remove submodule\"\n```\n\n\n\n\n","source":"_posts/git submodule的使用.md","raw":"---\nlayout: post\ntitle: Git submodule的使用\ncategory : Git\ntagline: \"Supporting tagline\"\ntags : [Git]\ndescription: 最近在做一个上传的客户端，上传的部分由后端同学以SDK的方式提供，因此该SDK是在一个独立的仓库，那么对于客户端该如何方便的对集成该SDK呢？这就可以考虑用git的submodule。\ndate: 2016-7-24 23:30:09\n---\n\n### **遇到的问题**\n\n最近在做一个上传的客户端，上传的部分由后端同学以SDK的方式提供，因此该SDK是在一个独立的仓库，那么对于客户端该如何方便的集成该SDK呢？每次SDK更新把代码拷贝到客户端仓库？把SDK发布到npm？显然都不合理，这就可以考虑用git的submodule。\n\n### **什么是submodule**\n\nsubmodule是一个多项目管理工具，它允许将子项目以独立的git项目添加到主项目，而主项目以submodule的形式拥有子项目。子项目拥有自己的commit、push、pull，而与主项目互不干扰。主项目只需要记录子项目的地址和所需要的commit id，通过地址和commit id 就能够得到对应的子项目。\n\n### **添加submodule**\n通常情况下，我们都有一个主项目(MainProject)，在MainProject文件夹下执行如下命令，即可添加submodule。\n```\n$ git add submodule [url] [path]\n//url为子项目远程地址或本地地址, path为子项目路径，可省略\n例: git add submodule git@github.com:fengyueran/UploaderSDK.git ./src/UploaderSDK\n```\ngit status可以看到如下信息\n```\n On branch master\n    Changes to be committed:\n    \n        new file:   .gitmodules\n        new file:   UploaderSDK\n```\n可以看到多了两个个文件.gitmodules和UploaderSDK。\ncat .gitmodules看到.gitmodules储存了submodule的路径及远程地址。\n```\n[submodule \"src/uploaderSDK\"]\n\tpath = src/uploaderSDK\n\turl = git@github.com:fengyueran/UploaderSDK.git\n```\nUploaderSDK的内容为submodule的commit id。\n```\nSubproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089\n```\n不难想象通过.gitmodules和UploaderSDK的信息就可以拿到submodule的内容了，因此我们需要提交这个两个文件。\n```\ngit add .\ngit commit -m \"add submodule\"\n```\n\n### **克隆带有submodule的项目**\n\n主要有两个方式\n\n**1. 采用先克隆后更新的方式**\n\n和想象中的不一样，直接clone主项目，submodule并不会跟着clone下来，而只有包含submodule名的空文件夹。\n```\n1）$ git clone git@github.com:fengyueran/MainProject.git\n```\n需再执行如下命令\n```\n2）$ git submodule init\n```\n输出如下，可以看到该命令给子项目注册了路径，即在主项目中的位置。此时，uploaderSDK文件夹仍未空。\n```\n    \n    Submodule 'src/uploaderSDK' (git@github.com:fengyueran/UploaderSDK.git) registered for path 'src/uploaderSDK'\n```\n\b再执行\n```\n//该命令\b并不是直接更新到最新的submodule commit，而是更新至主项目\b所存储存的commit(有可能是较旧的commit)。\n3）$ git submodule update\n```\n输出如下，可以看到sumodule得到更新，更新到主项目存储的submodule commit，是一个游离的git header。\n  ```\n  Cloning into '/Work/test/MainProject/tmp/MainProject/src/uploaderSDK'...\n\n  Submodule path 'src/uploaderSDK': checked out '6b53e1840b27ca1587b96c1eb9dd5f4ff0866089'\n  ```\n\n\n**2. 采用递归参数--recursive**\n\n```\ngit clone git@github.com:fengyueran/MainProject.git --recursive\n```\n输出如下，可以看到主项目包括submodule都被clone下来了。\n```\nCloning into 'MainProject'...\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (4/4), done.\nReceiving objects: 100% (7/7), done.\nremote: Total 7 (delta 0), reused 4 (delta 0), pack-reused 0\nSubmodule 'src/uploaderSDK' (git@github.com:fengyueran/UploaderSDK.git) registered for path 'src/uploaderSDK'\nCloning into '/Work/test/MainProject/tmp/MainProject/tmp/MainProject/src/uploaderSDK'...\nSubmodule path 'src/uploaderSDK': checked out '6b53e1840b27ca1587b96c1eb9dd5f4ff0866089'\n```\n\n### **修改更新submodule**\n\n主要有两种情况\n\n**1. 直接在主项目中的submodule下修改**\n\n如上例，直接在MainProject下的src/uploaderSDK中修改，uploaderSDK切换到工作分支，修改并提交后，可以checkout到最新的commit，也可以不切，反正都在当前最新的commit上(如果想测试其他commit也可以切换到相应commit上)，此时MainProject中我们可以看到src/uploaderSDK的commit有如下变化，a4d6为修改的提交，需要注意的地方是此时submodule已经在最新的commit上了，不要再在MainProject中git submodule update进行更新了，如果进行此操作submodule又会回到原来的commit(带有减号的commit)，只需要在MainProject提交，并在必要的时候push到远程仓库。这种方法，非submodule的开发人员就不用关心submodule是否更新了，只需要在MainProject下pull代码发现submodule有更改时执行git submodule update(更新为带减号commit)进行更新，前提是其他开发人员提交了正确的submodule commit。\n```差点\n-Subproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089\n+Subproject commit a4d6dc0457673a275b1f6cbeda6f8ff23293b9de\n```\n**2. 在submodule自己独立的仓库进行修改**\n\n在工作目录克隆下submodule的仓库，切换到工作分支进行修改提交并push到远程仓库。这种方法需要submodule开发人员告诉MainProject的开发人员submodule有更新或主动查看是否有更新，有更新时就在MainProject的src/uploaderSDK下pull远程代码(需要知道submodule的工作分支)，快速合并后，uploaderSDK的commit有如下变化，此时同1不要git submodule update，而只是在MainProject下提交这个更改。\n```\n-Subproject commit f4573cc1bb50000779202c7f56a640b1ffc075cb\n+Subproject commit 64ae6d149c0f6e3b06b8cea262c6126a7bc0887f\n\n```\n\n### **删除submodule**\n\n执行如下命令\n\n1) $ git submodule deinit \n```\n逆初始化模块，submodule为子模块目录，执行后可发现子模块目录被清空\n$ git submodule deinit [submodule_name] \n-> Cleared directory 'test2sub'\nSubmodule 'test2sub' (git@github.com:fengyueran/test2sub.git) unregistered for path 'test2sub'\n\n//执行如下命令还能看到子项目信息\n$ git submodule\n-> -dab52c62f52353d9967619625c28e28dc4320aef test2sub\n```\n2) $ git rm --cached [submodule_name]\n```\n// 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）\ngit rm --cached test2sub\n//执行如下命令已看看不到删除的子项目信息了\n$ git submodule\n```\n3）$ git commit\n```\ngit commit -m \"remove submodule\"\n```\n\n\n\n\n","slug":"git submodule的使用","published":1,"updated":"2018-07-06T05:59:34.000Z","comments":1,"photos":[],"link":"","_id":"cjj9krdox0001io0ruvufnczu","content":"<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a><strong>遇到的问题</strong></h3><p>最近在做一个上传的客户端，上传的部分由后端同学以SDK的方式提供，因此该SDK是在一个独立的仓库，那么对于客户端该如何方便的集成该SDK呢？每次SDK更新把代码拷贝到客户端仓库？把SDK发布到npm？显然都不合理，这就可以考虑用git的submodule。</p>\n<h3 id=\"什么是submodule\"><a href=\"#什么是submodule\" class=\"headerlink\" title=\"什么是submodule\"></a><strong>什么是submodule</strong></h3><p>submodule是一个多项目管理工具，它允许将子项目以独立的git项目添加到主项目，而主项目以submodule的形式拥有子项目。子项目拥有自己的commit、push、pull，而与主项目互不干扰。主项目只需要记录子项目的地址和所需要的commit id，通过地址和commit id 就能够得到对应的子项目。</p>\n<h3 id=\"添加submodule\"><a href=\"#添加submodule\" class=\"headerlink\" title=\"添加submodule\"></a><strong>添加submodule</strong></h3><p>通常情况下，我们都有一个主项目(MainProject)，在MainProject文件夹下执行如下命令，即可添加submodule。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add submodule [url] [path]</span><br><span class=\"line\">//url为子项目远程地址或本地地址, path为子项目路径，可省略</span><br><span class=\"line\">例: git add submodule git@github.com:fengyueran/UploaderSDK.git ./src/UploaderSDK</span><br></pre></td></tr></table></figure></p>\n<p>git status可以看到如下信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">   Changes to be committed:</span><br><span class=\"line\">   </span><br><span class=\"line\">       new file:   .gitmodules</span><br><span class=\"line\">       new file:   UploaderSDK</span><br></pre></td></tr></table></figure></p>\n<p>可以看到多了两个个文件.gitmodules和UploaderSDK。<br>cat .gitmodules看到.gitmodules储存了submodule的路径及远程地址。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;src/uploaderSDK&quot;]</span><br><span class=\"line\">\tpath = src/uploaderSDK</span><br><span class=\"line\">\turl = git@github.com:fengyueran/UploaderSDK.git</span><br></pre></td></tr></table></figure></p>\n<p>UploaderSDK的内容为submodule的commit id。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089</span><br></pre></td></tr></table></figure></p>\n<p>不难想象通过.gitmodules和UploaderSDK的信息就可以拿到submodule的内容了，因此我们需要提交这个两个文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;add submodule&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"克隆带有submodule的项目\"><a href=\"#克隆带有submodule的项目\" class=\"headerlink\" title=\"克隆带有submodule的项目\"></a><strong>克隆带有submodule的项目</strong></h3><p>主要有两个方式</p>\n<p><strong>1. 采用先克隆后更新的方式</strong></p>\n<p>和想象中的不一样，直接clone主项目，submodule并不会跟着clone下来，而只有包含submodule名的空文件夹。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）$ git clone git@github.com:fengyueran/MainProject.git</span><br></pre></td></tr></table></figure></p>\n<p>需再执行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2）$ git submodule init</span><br></pre></td></tr></table></figure></p>\n<p>输出如下，可以看到该命令给子项目注册了路径，即在主项目中的位置。此时，uploaderSDK文件夹仍未空。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Submodule &apos;src/uploaderSDK&apos; (git@github.com:fengyueran/UploaderSDK.git) registered for path &apos;src/uploaderSDK&apos;</span><br></pre></td></tr></table></figure></p>\n<p>\b再执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//该命令\b并不是直接更新到最新的submodule commit，而是更新至主项目\b所存储存的commit(有可能是较旧的commit)。</span><br><span class=\"line\">3）$ git submodule update</span><br></pre></td></tr></table></figure></p>\n<p>输出如下，可以看到sumodule得到更新，更新到主项目存储的submodule commit，是一个游离的git header。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &apos;/Work/test/MainProject/tmp/MainProject/src/uploaderSDK&apos;...</span><br><span class=\"line\"></span><br><span class=\"line\">Submodule path &apos;src/uploaderSDK&apos;: checked out &apos;6b53e1840b27ca1587b96c1eb9dd5f4ff0866089&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 采用递归参数–recursive</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:fengyueran/MainProject.git --recursive</span><br></pre></td></tr></table></figure>\n<p>输出如下，可以看到主项目包括submodule都被clone下来了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &apos;MainProject&apos;...</span><br><span class=\"line\">remote: Counting objects: 7, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (4/4), done.</span><br><span class=\"line\">Receiving objects: 100% (7/7), done.</span><br><span class=\"line\">remote: Total 7 (delta 0), reused 4 (delta 0), pack-reused 0</span><br><span class=\"line\">Submodule &apos;src/uploaderSDK&apos; (git@github.com:fengyueran/UploaderSDK.git) registered for path &apos;src/uploaderSDK&apos;</span><br><span class=\"line\">Cloning into &apos;/Work/test/MainProject/tmp/MainProject/tmp/MainProject/src/uploaderSDK&apos;...</span><br><span class=\"line\">Submodule path &apos;src/uploaderSDK&apos;: checked out &apos;6b53e1840b27ca1587b96c1eb9dd5f4ff0866089&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改更新submodule\"><a href=\"#修改更新submodule\" class=\"headerlink\" title=\"修改更新submodule\"></a><strong>修改更新submodule</strong></h3><p>主要有两种情况</p>\n<p><strong>1. 直接在主项目中的submodule下修改</strong></p>\n<p>如上例，直接在MainProject下的src/uploaderSDK中修改，uploaderSDK切换到工作分支，修改并提交后，可以checkout到最新的commit，也可以不切，反正都在当前最新的commit上(如果想测试其他commit也可以切换到相应commit上)，此时MainProject中我们可以看到src/uploaderSDK的commit有如下变化，a4d6为修改的提交，需要注意的地方是此时submodule已经在最新的commit上了，不要再在MainProject中git submodule update进行更新了，如果进行此操作submodule又会回到原来的commit(带有减号的commit)，只需要在MainProject提交，并在必要的时候push到远程仓库。这种方法，非submodule的开发人员就不用关心submodule是否更新了，只需要在MainProject下pull代码发现submodule有更改时执行git submodule update(更新为带减号commit)进行更新，前提是其他开发人员提交了正确的submodule commit。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Subproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089</span><br><span class=\"line\">+Subproject commit a4d6dc0457673a275b1f6cbeda6f8ff23293b9de</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 在submodule自己独立的仓库进行修改</strong></p>\n<p>在工作目录克隆下submodule的仓库，切换到工作分支进行修改提交并push到远程仓库。这种方法需要submodule开发人员告诉MainProject的开发人员submodule有更新或主动查看是否有更新，有更新时就在MainProject的src/uploaderSDK下pull远程代码(需要知道submodule的工作分支)，快速合并后，uploaderSDK的commit有如下变化，此时同1不要git submodule update，而只是在MainProject下提交这个更改。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Subproject commit f4573cc1bb50000779202c7f56a640b1ffc075cb</span><br><span class=\"line\">+Subproject commit 64ae6d149c0f6e3b06b8cea262c6126a7bc0887f</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除submodule\"><a href=\"#删除submodule\" class=\"headerlink\" title=\"删除submodule\"></a><strong>删除submodule</strong></h3><p>执行如下命令</p>\n<p>1) $ git submodule deinit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">逆初始化模块，submodule为子模块目录，执行后可发现子模块目录被清空</span><br><span class=\"line\">$ git submodule deinit [submodule_name] </span><br><span class=\"line\">-&gt; Cleared directory &apos;test2sub&apos;</span><br><span class=\"line\">Submodule &apos;test2sub&apos; (git@github.com:fengyueran/test2sub.git) unregistered for path &apos;test2sub&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//执行如下命令还能看到子项目信息</span><br><span class=\"line\">$ git submodule</span><br><span class=\"line\">-&gt; -dab52c62f52353d9967619625c28e28dc4320aef test2sub</span><br></pre></td></tr></table></figure></p>\n<p>2) $ git rm –cached [submodule_name]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）</span><br><span class=\"line\">git rm --cached test2sub</span><br><span class=\"line\">//执行如下命令已看看不到删除的子项目信息了</span><br><span class=\"line\">$ git submodule</span><br></pre></td></tr></table></figure></p>\n<p>3）$ git commit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;remove submodule&quot;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a><strong>遇到的问题</strong></h3><p>最近在做一个上传的客户端，上传的部分由后端同学以SDK的方式提供，因此该SDK是在一个独立的仓库，那么对于客户端该如何方便的集成该SDK呢？每次SDK更新把代码拷贝到客户端仓库？把SDK发布到npm？显然都不合理，这就可以考虑用git的submodule。</p>\n<h3 id=\"什么是submodule\"><a href=\"#什么是submodule\" class=\"headerlink\" title=\"什么是submodule\"></a><strong>什么是submodule</strong></h3><p>submodule是一个多项目管理工具，它允许将子项目以独立的git项目添加到主项目，而主项目以submodule的形式拥有子项目。子项目拥有自己的commit、push、pull，而与主项目互不干扰。主项目只需要记录子项目的地址和所需要的commit id，通过地址和commit id 就能够得到对应的子项目。</p>\n<h3 id=\"添加submodule\"><a href=\"#添加submodule\" class=\"headerlink\" title=\"添加submodule\"></a><strong>添加submodule</strong></h3><p>通常情况下，我们都有一个主项目(MainProject)，在MainProject文件夹下执行如下命令，即可添加submodule。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add submodule [url] [path]</span><br><span class=\"line\">//url为子项目远程地址或本地地址, path为子项目路径，可省略</span><br><span class=\"line\">例: git add submodule git@github.com:fengyueran/UploaderSDK.git ./src/UploaderSDK</span><br></pre></td></tr></table></figure></p>\n<p>git status可以看到如下信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">   Changes to be committed:</span><br><span class=\"line\">   </span><br><span class=\"line\">       new file:   .gitmodules</span><br><span class=\"line\">       new file:   UploaderSDK</span><br></pre></td></tr></table></figure></p>\n<p>可以看到多了两个个文件.gitmodules和UploaderSDK。<br>cat .gitmodules看到.gitmodules储存了submodule的路径及远程地址。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;src/uploaderSDK&quot;]</span><br><span class=\"line\">\tpath = src/uploaderSDK</span><br><span class=\"line\">\turl = git@github.com:fengyueran/UploaderSDK.git</span><br></pre></td></tr></table></figure></p>\n<p>UploaderSDK的内容为submodule的commit id。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089</span><br></pre></td></tr></table></figure></p>\n<p>不难想象通过.gitmodules和UploaderSDK的信息就可以拿到submodule的内容了，因此我们需要提交这个两个文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;add submodule&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"克隆带有submodule的项目\"><a href=\"#克隆带有submodule的项目\" class=\"headerlink\" title=\"克隆带有submodule的项目\"></a><strong>克隆带有submodule的项目</strong></h3><p>主要有两个方式</p>\n<p><strong>1. 采用先克隆后更新的方式</strong></p>\n<p>和想象中的不一样，直接clone主项目，submodule并不会跟着clone下来，而只有包含submodule名的空文件夹。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）$ git clone git@github.com:fengyueran/MainProject.git</span><br></pre></td></tr></table></figure></p>\n<p>需再执行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2）$ git submodule init</span><br></pre></td></tr></table></figure></p>\n<p>输出如下，可以看到该命令给子项目注册了路径，即在主项目中的位置。此时，uploaderSDK文件夹仍未空。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Submodule &apos;src/uploaderSDK&apos; (git@github.com:fengyueran/UploaderSDK.git) registered for path &apos;src/uploaderSDK&apos;</span><br></pre></td></tr></table></figure></p>\n<p>\b再执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//该命令\b并不是直接更新到最新的submodule commit，而是更新至主项目\b所存储存的commit(有可能是较旧的commit)。</span><br><span class=\"line\">3）$ git submodule update</span><br></pre></td></tr></table></figure></p>\n<p>输出如下，可以看到sumodule得到更新，更新到主项目存储的submodule commit，是一个游离的git header。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &apos;/Work/test/MainProject/tmp/MainProject/src/uploaderSDK&apos;...</span><br><span class=\"line\"></span><br><span class=\"line\">Submodule path &apos;src/uploaderSDK&apos;: checked out &apos;6b53e1840b27ca1587b96c1eb9dd5f4ff0866089&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 采用递归参数–recursive</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:fengyueran/MainProject.git --recursive</span><br></pre></td></tr></table></figure>\n<p>输出如下，可以看到主项目包括submodule都被clone下来了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cloning into &apos;MainProject&apos;...</span><br><span class=\"line\">remote: Counting objects: 7, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (4/4), done.</span><br><span class=\"line\">Receiving objects: 100% (7/7), done.</span><br><span class=\"line\">remote: Total 7 (delta 0), reused 4 (delta 0), pack-reused 0</span><br><span class=\"line\">Submodule &apos;src/uploaderSDK&apos; (git@github.com:fengyueran/UploaderSDK.git) registered for path &apos;src/uploaderSDK&apos;</span><br><span class=\"line\">Cloning into &apos;/Work/test/MainProject/tmp/MainProject/tmp/MainProject/src/uploaderSDK&apos;...</span><br><span class=\"line\">Submodule path &apos;src/uploaderSDK&apos;: checked out &apos;6b53e1840b27ca1587b96c1eb9dd5f4ff0866089&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改更新submodule\"><a href=\"#修改更新submodule\" class=\"headerlink\" title=\"修改更新submodule\"></a><strong>修改更新submodule</strong></h3><p>主要有两种情况</p>\n<p><strong>1. 直接在主项目中的submodule下修改</strong></p>\n<p>如上例，直接在MainProject下的src/uploaderSDK中修改，uploaderSDK切换到工作分支，修改并提交后，可以checkout到最新的commit，也可以不切，反正都在当前最新的commit上(如果想测试其他commit也可以切换到相应commit上)，此时MainProject中我们可以看到src/uploaderSDK的commit有如下变化，a4d6为修改的提交，需要注意的地方是此时submodule已经在最新的commit上了，不要再在MainProject中git submodule update进行更新了，如果进行此操作submodule又会回到原来的commit(带有减号的commit)，只需要在MainProject提交，并在必要的时候push到远程仓库。这种方法，非submodule的开发人员就不用关心submodule是否更新了，只需要在MainProject下pull代码发现submodule有更改时执行git submodule update(更新为带减号commit)进行更新，前提是其他开发人员提交了正确的submodule commit。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Subproject commit 6b53e1840b27ca1587b96c1eb9dd5f4ff0866089</span><br><span class=\"line\">+Subproject commit a4d6dc0457673a275b1f6cbeda6f8ff23293b9de</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 在submodule自己独立的仓库进行修改</strong></p>\n<p>在工作目录克隆下submodule的仓库，切换到工作分支进行修改提交并push到远程仓库。这种方法需要submodule开发人员告诉MainProject的开发人员submodule有更新或主动查看是否有更新，有更新时就在MainProject的src/uploaderSDK下pull远程代码(需要知道submodule的工作分支)，快速合并后，uploaderSDK的commit有如下变化，此时同1不要git submodule update，而只是在MainProject下提交这个更改。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Subproject commit f4573cc1bb50000779202c7f56a640b1ffc075cb</span><br><span class=\"line\">+Subproject commit 64ae6d149c0f6e3b06b8cea262c6126a7bc0887f</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除submodule\"><a href=\"#删除submodule\" class=\"headerlink\" title=\"删除submodule\"></a><strong>删除submodule</strong></h3><p>执行如下命令</p>\n<p>1) $ git submodule deinit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">逆初始化模块，submodule为子模块目录，执行后可发现子模块目录被清空</span><br><span class=\"line\">$ git submodule deinit [submodule_name] </span><br><span class=\"line\">-&gt; Cleared directory &apos;test2sub&apos;</span><br><span class=\"line\">Submodule &apos;test2sub&apos; (git@github.com:fengyueran/test2sub.git) unregistered for path &apos;test2sub&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//执行如下命令还能看到子项目信息</span><br><span class=\"line\">$ git submodule</span><br><span class=\"line\">-&gt; -dab52c62f52353d9967619625c28e28dc4320aef test2sub</span><br></pre></td></tr></table></figure></p>\n<p>2) $ git rm –cached [submodule_name]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）</span><br><span class=\"line\">git rm --cached test2sub</span><br><span class=\"line\">//执行如下命令已看看不到删除的子项目信息了</span><br><span class=\"line\">$ git submodule</span><br></pre></td></tr></table></figure></p>\n<p>3）$ git commit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;remove submodule&quot;</span><br></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"Git常用命令","tagline":"Supporting tagline","description":"Git作为一种流行的版本管理系统已经广泛应用于我们的日常开发中，在这里记录下日常遇到的关于git的常见用法，以备后续查询。","date":"2016-06-24T15:30:09.000Z","_content":"\ngit的命令很多，为了减少后续查询的时间在这里列出了平常用到的一些命令。关于这些命令我们对git需要有一个基本的认识，如下图，git分为了几个区：\n<div align=center>\n![git structure sketch](/assets/gitSketch.png)\n\n\n#### 创建代码仓库\n\n```\n1）在当前文件夹创建仓库 \n$ git init \n\n2）新建文件夹并创建仓库\n$ git init [project-name]\n\n3）克隆远程分支，默认为master分支\n$ git clone [url] -b [branch-name] [your-folder]\n// 克隆远程dev分支到MyProject\n例: $ git clone https://github.com/fengyueran/Test.git -b dev MyProject\n```\n#### 配置\n\n通过git config可以配置git的环境变量，这些变量存在三个不同的地方\n- /etc/gitconfig文件：适用于所有用户。\n- ~/.gitconfig文件：适用于当前用户。\n- .git/config文件：\b当前项目中的配置文件，适用于当前项目。\n\n每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆/etc/gitconfig中的同名变量。\n```\n1）查看配置信息(包括用户名、邮箱等)\n$ git config --list\n\n2）编辑配置文件(--system/global)\n$ git config -e \n// 编辑当前用户的配置文件, --global:适用于当前用户， --system:适用于所有用户，不带参数: 当前项目\n例: $ git config -e --global\n\n3）设置当前用户信息\n$ git config --global user.name \"[name]\"\n$ git config --global user.email \"[email address]\"\n\n4）清除当前用户信息\n$ git config --unset --global user.name \"[name]\"\n$ git config --unset --global user.email \"[email address]\"\n```\n#### 文件\b操作\n```\n1）添加文件file1，file2...到暂存区\n$ git add [file1] [file2]\n\n2）添加当前目录所有文件到暂存区\n$ git add .\n\n3) 添加目录(包括子目录)到暂存区\n$ git add [dir]\n\n4) 删除当前目录没有track过的文件\n$ git clean -f\n\n5) 删除当前目录没有track过的文件和文件夹\n$ git clean -df\n\n6) 删除所有本地未提交的修改\n$ git checkout .\n\n7）提交暂存区到仓库区 \n$ git commit -m [message]\n\n8）追加到上一次提交 \n$ git commit --amend -m [message]\n\n```\n#### 查看信息\n```\n1）查看当前分支及其所有父类的提交历史\n$ git log \n\n2）可以查看所有分支的所有操作记录(包括已经被删除的commit记录和reset操作）\n$ git reflog\n\n3）查看变更的文件\n$ git status\n\n4）查看b\b提交相对a提交的差异\n$ git diff [a-commit] [b-commit]\n\n5）查看工作区与最新commit的前一次commit的差异，当从远程拉取更新时即可查看变动的内容。\n$ git diff HEAD^\n\n```\n#### 远程操作\n```\n1）列出远程仓库名\n$ git remote\n\n2）列出远程仓库名及对应的地址\n$ git remote –v  \n-> origin\tgit@github.com:fengyueran/iOSNote.git (fetch)\n-> origin\tgit@github.com:fengyueran/iOSNote.git (push)\n\n3）推送当前本地分支到远程分支\n$ git push [remote-repository-name] [branch-name]\n// 将当前分支dev推送到远程仓库origin的remoteDev分支\n例: $ git push origin dev:remoteDev\n ->   * [new branch]      dev -> remoteDev\n// 省略远程仓库分支名则在远程创建当前同名分支dev\n例: $ git push origin dev\n ->   * [new branch]      dev -> dev\n\n4）删除远程仓库origin的分支dev\n例: $ git push origin --delete dev\n\n5）添加远程仓库\n$ git remote add [repository] [url]\n// 在远程添加名为pb的仓库\n例: $ git remote add pb git://github.com/fengyueran/test.git\n\n6) 拉取远端数据\n// 使你与另一仓库同步，提取你本地所没有的数据，不merge，拉取下来的数据在.git/FETCH_HEAD下\n$ git fetch \n// 将你的仓库与远端仓库origin同步，提取所有它独有的数据到本地分支以合并或者怎样。\n$ git fetch origin\n// 下面的fetch操作使用远程dev分支在本地创建localDev分支(但不会切换到该分支)，如果本地不存在localDev分支,则会自动创建一个新的localDev分支,\n如果本地存在localDev分支, 并且是`fast forward', 则自动合并两个分支, 否则, 会阻止以上操作。\n$ git fetch origin dev:localDev\n-> * [new branch]      dev        -> localDev\n\n7）从远程仓库提取数据并尝试合并到当前分支\n// 基本上，该命令就是在git fetch之后紧接着git merge远端分支到当前分支\n$ git pull \n\n//当新建分支时，如果直接pull或push需要参数远程仓库名和分支名\n$ git pull origin dev\n如果想省略仓库名和分支名则需要建立追踪关系，执行如下命令\n$ git pull --set-upstream origin dev\n\n\n//merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点, 因而能产生一个更为整洁的提交历史\n$ git pull --rebase\n//假设提交线图在执行pull前是这样的：\n      C1---D1---E1  remotes/origin/master\n      /\n  A---B---C2---D2  master\n执行git pull则提交线图会变成这样：\n      C1---D1---E1  remotes/origin/master\n      /          \\\n  A---B---C2---D2-F  master\n即会产生一个多余的合并历史，\n如果执行git pull --rebase则提交线图会变成这样：\n    remotes/origin/master\n                  |\n  A---B---C1---D1---C2'---D2'  master\n可以看到，应用rebase则不会有新的提交F。C2,D2删除后重新提交为C2',D2'了。\n```\n\n#### 分支操作\n\n```\n1）查看本地分支\n$ git branch\n\n2）查看远程分支,远程分支会用红色表示出来(如果你开了颜色支持的话）\n$ git branch -r\n\n3）新建分支\n$ git branch [branch-name]\n例: $ git branch dev\n\n4）切换分支\n$ git checkout [branch-name]\n例: $ git checkout dev\n\n5）新建并切换分支 \n$ git checkout -b [branch-name]\n// 当前分支的记录都会到新分支dev上\n例: $ git checkout -b dev\n\n6）删除分支 \n$ git branch -D [branch-name]\n\n7）叫起合并冲突工具kdiff3\n$ git mergetool -t kdiff3\n\n8) 合并某个分支到当前分支\n// 如果不是`fast forward'则会产生合并的提交历史\n$ git merge [branch-name]\n// 将hotfix分支合并到当前分支\n例: $ git merge hotfix\n// 无论是否是`fast forward'都产生合并的提交历史\n例: $ git merge hotfix --no-f\n\n9) 选择任意一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n10）合并提交历史 \n// 当我们由master分支切换到新的分支dev工作，工作结束后想merge回master，如果直接在master应用git merge dev，\ndev的提交历史就会出现在master中，有时这些记录很琐碎没有必要添加到master上，用squash就能解决这一问题。\na:squash后dev上的提交就变成了新的文件\n  $ git merge --squash dev\nb:重新commit代替之前所有提交\n  $ git commit -m \"dev\"\n\n```\n#### 版本回退\n\n```\n1）储存临时文件\n//当工作区有未提交的文件，又想切换到另一个branch时就可以用git stash暂时存储\n$ git stash \n\n2）查看存储了哪些文件\n$ git stash list\n\n3）应用存储的临时文件\n// 当回到之前的dirty工作区时可以通过git stash apply来恢复之前未提交的文件，也可以在其他branch应用这些存储的临时文件\n$ git stash apply\n\n4) 让单个文件回退到指定的版本\na:进入到文件所在文件目录，或者能找到文件的路径\n  $ git reflog test.js\n  -> 60e207a (HEAD -> master) HEAD@{0}: commit: test.js +2\n     1435819 HEAD@{1}: commit: test.js +1\nb:回退到指定的版本\n  $  git reset 1435819 test.js\n\n```\n#### tag\n\n```\n1) 轻量级tag\n$ git tag [version]\n例: $ git tag v1.0.0\n \n2) 创建一个含附注类型的标签非常简单\n$ git tag -a [version] -m \"[detail]\"\n$ git tag -a v1.1.1 -m \"CuraCloudMI version 1.1.1\"\n\n3) 查看tag\n$ git show [version]\n\n4) 删除tag\ngit tag -d [version]\n```\n#### 其他\n```\n1) 查看某个命令的帮助\ngit help [command-name]\n\n2) 保留空文件\n在空文件夹中新建.gitkeep文件\n\n3) 忽略某些文件\n在.gitignore文件中添加需要忽略的文件夹或文件\n例: \n//忽略Pods文件夹下的所有文件\nplatforms/ios/Pods\n\n//忽略www下的所有文件除了plugins\nplatforms/ios/www/*\n!platforms/ios/www/plugins\n\n```\n\n\n\n\n\n\n","source":"_posts/git的常用命令简介.md","raw":"---\nlayout: post\ntitle: Git常用命令\ncategory : Git\ntagline: \"Supporting tagline\"\ntags : [Git]\ndescription : Git作为一种流行的版本管理系统已经广泛应用于我们的日常开发中，在这里记录下日常遇到的关于git的常见用法，以备后续查询。\ndate: 2016-6-24 23:30:09\n---\n\ngit的命令很多，为了减少后续查询的时间在这里列出了平常用到的一些命令。关于这些命令我们对git需要有一个基本的认识，如下图，git分为了几个区：\n<div align=center>\n![git structure sketch](/assets/gitSketch.png)\n\n\n#### 创建代码仓库\n\n```\n1）在当前文件夹创建仓库 \n$ git init \n\n2）新建文件夹并创建仓库\n$ git init [project-name]\n\n3）克隆远程分支，默认为master分支\n$ git clone [url] -b [branch-name] [your-folder]\n// 克隆远程dev分支到MyProject\n例: $ git clone https://github.com/fengyueran/Test.git -b dev MyProject\n```\n#### 配置\n\n通过git config可以配置git的环境变量，这些变量存在三个不同的地方\n- /etc/gitconfig文件：适用于所有用户。\n- ~/.gitconfig文件：适用于当前用户。\n- .git/config文件：\b当前项目中的配置文件，适用于当前项目。\n\n每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆/etc/gitconfig中的同名变量。\n```\n1）查看配置信息(包括用户名、邮箱等)\n$ git config --list\n\n2）编辑配置文件(--system/global)\n$ git config -e \n// 编辑当前用户的配置文件, --global:适用于当前用户， --system:适用于所有用户，不带参数: 当前项目\n例: $ git config -e --global\n\n3）设置当前用户信息\n$ git config --global user.name \"[name]\"\n$ git config --global user.email \"[email address]\"\n\n4）清除当前用户信息\n$ git config --unset --global user.name \"[name]\"\n$ git config --unset --global user.email \"[email address]\"\n```\n#### 文件\b操作\n```\n1）添加文件file1，file2...到暂存区\n$ git add [file1] [file2]\n\n2）添加当前目录所有文件到暂存区\n$ git add .\n\n3) 添加目录(包括子目录)到暂存区\n$ git add [dir]\n\n4) 删除当前目录没有track过的文件\n$ git clean -f\n\n5) 删除当前目录没有track过的文件和文件夹\n$ git clean -df\n\n6) 删除所有本地未提交的修改\n$ git checkout .\n\n7）提交暂存区到仓库区 \n$ git commit -m [message]\n\n8）追加到上一次提交 \n$ git commit --amend -m [message]\n\n```\n#### 查看信息\n```\n1）查看当前分支及其所有父类的提交历史\n$ git log \n\n2）可以查看所有分支的所有操作记录(包括已经被删除的commit记录和reset操作）\n$ git reflog\n\n3）查看变更的文件\n$ git status\n\n4）查看b\b提交相对a提交的差异\n$ git diff [a-commit] [b-commit]\n\n5）查看工作区与最新commit的前一次commit的差异，当从远程拉取更新时即可查看变动的内容。\n$ git diff HEAD^\n\n```\n#### 远程操作\n```\n1）列出远程仓库名\n$ git remote\n\n2）列出远程仓库名及对应的地址\n$ git remote –v  \n-> origin\tgit@github.com:fengyueran/iOSNote.git (fetch)\n-> origin\tgit@github.com:fengyueran/iOSNote.git (push)\n\n3）推送当前本地分支到远程分支\n$ git push [remote-repository-name] [branch-name]\n// 将当前分支dev推送到远程仓库origin的remoteDev分支\n例: $ git push origin dev:remoteDev\n ->   * [new branch]      dev -> remoteDev\n// 省略远程仓库分支名则在远程创建当前同名分支dev\n例: $ git push origin dev\n ->   * [new branch]      dev -> dev\n\n4）删除远程仓库origin的分支dev\n例: $ git push origin --delete dev\n\n5）添加远程仓库\n$ git remote add [repository] [url]\n// 在远程添加名为pb的仓库\n例: $ git remote add pb git://github.com/fengyueran/test.git\n\n6) 拉取远端数据\n// 使你与另一仓库同步，提取你本地所没有的数据，不merge，拉取下来的数据在.git/FETCH_HEAD下\n$ git fetch \n// 将你的仓库与远端仓库origin同步，提取所有它独有的数据到本地分支以合并或者怎样。\n$ git fetch origin\n// 下面的fetch操作使用远程dev分支在本地创建localDev分支(但不会切换到该分支)，如果本地不存在localDev分支,则会自动创建一个新的localDev分支,\n如果本地存在localDev分支, 并且是`fast forward', 则自动合并两个分支, 否则, 会阻止以上操作。\n$ git fetch origin dev:localDev\n-> * [new branch]      dev        -> localDev\n\n7）从远程仓库提取数据并尝试合并到当前分支\n// 基本上，该命令就是在git fetch之后紧接着git merge远端分支到当前分支\n$ git pull \n\n//当新建分支时，如果直接pull或push需要参数远程仓库名和分支名\n$ git pull origin dev\n如果想省略仓库名和分支名则需要建立追踪关系，执行如下命令\n$ git pull --set-upstream origin dev\n\n\n//merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点, 因而能产生一个更为整洁的提交历史\n$ git pull --rebase\n//假设提交线图在执行pull前是这样的：\n      C1---D1---E1  remotes/origin/master\n      /\n  A---B---C2---D2  master\n执行git pull则提交线图会变成这样：\n      C1---D1---E1  remotes/origin/master\n      /          \\\n  A---B---C2---D2-F  master\n即会产生一个多余的合并历史，\n如果执行git pull --rebase则提交线图会变成这样：\n    remotes/origin/master\n                  |\n  A---B---C1---D1---C2'---D2'  master\n可以看到，应用rebase则不会有新的提交F。C2,D2删除后重新提交为C2',D2'了。\n```\n\n#### 分支操作\n\n```\n1）查看本地分支\n$ git branch\n\n2）查看远程分支,远程分支会用红色表示出来(如果你开了颜色支持的话）\n$ git branch -r\n\n3）新建分支\n$ git branch [branch-name]\n例: $ git branch dev\n\n4）切换分支\n$ git checkout [branch-name]\n例: $ git checkout dev\n\n5）新建并切换分支 \n$ git checkout -b [branch-name]\n// 当前分支的记录都会到新分支dev上\n例: $ git checkout -b dev\n\n6）删除分支 \n$ git branch -D [branch-name]\n\n7）叫起合并冲突工具kdiff3\n$ git mergetool -t kdiff3\n\n8) 合并某个分支到当前分支\n// 如果不是`fast forward'则会产生合并的提交历史\n$ git merge [branch-name]\n// 将hotfix分支合并到当前分支\n例: $ git merge hotfix\n// 无论是否是`fast forward'都产生合并的提交历史\n例: $ git merge hotfix --no-f\n\n9) 选择任意一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n10）合并提交历史 \n// 当我们由master分支切换到新的分支dev工作，工作结束后想merge回master，如果直接在master应用git merge dev，\ndev的提交历史就会出现在master中，有时这些记录很琐碎没有必要添加到master上，用squash就能解决这一问题。\na:squash后dev上的提交就变成了新的文件\n  $ git merge --squash dev\nb:重新commit代替之前所有提交\n  $ git commit -m \"dev\"\n\n```\n#### 版本回退\n\n```\n1）储存临时文件\n//当工作区有未提交的文件，又想切换到另一个branch时就可以用git stash暂时存储\n$ git stash \n\n2）查看存储了哪些文件\n$ git stash list\n\n3）应用存储的临时文件\n// 当回到之前的dirty工作区时可以通过git stash apply来恢复之前未提交的文件，也可以在其他branch应用这些存储的临时文件\n$ git stash apply\n\n4) 让单个文件回退到指定的版本\na:进入到文件所在文件目录，或者能找到文件的路径\n  $ git reflog test.js\n  -> 60e207a (HEAD -> master) HEAD@{0}: commit: test.js +2\n     1435819 HEAD@{1}: commit: test.js +1\nb:回退到指定的版本\n  $  git reset 1435819 test.js\n\n```\n#### tag\n\n```\n1) 轻量级tag\n$ git tag [version]\n例: $ git tag v1.0.0\n \n2) 创建一个含附注类型的标签非常简单\n$ git tag -a [version] -m \"[detail]\"\n$ git tag -a v1.1.1 -m \"CuraCloudMI version 1.1.1\"\n\n3) 查看tag\n$ git show [version]\n\n4) 删除tag\ngit tag -d [version]\n```\n#### 其他\n```\n1) 查看某个命令的帮助\ngit help [command-name]\n\n2) 保留空文件\n在空文件夹中新建.gitkeep文件\n\n3) 忽略某些文件\n在.gitignore文件中添加需要忽略的文件夹或文件\n例: \n//忽略Pods文件夹下的所有文件\nplatforms/ios/Pods\n\n//忽略www下的所有文件除了plugins\nplatforms/ios/www/*\n!platforms/ios/www/plugins\n\n```\n\n\n\n\n\n\n","slug":"git的常用命令简介","published":1,"updated":"2018-07-06T05:59:34.000Z","comments":1,"photos":[],"link":"","_id":"cjj9krdp00002io0rhfwlwycn","content":"<p>git的命令很多，为了减少后续查询的时间在这里列出了平常用到的一些命令。关于这些命令我们对git需要有一个基本的认识，如下图，git分为了几个区：</p>\n<p><div align=\"center\"><br><img src=\"/assets/gitSketch.png\" alt=\"git structure sketch\"></div></p>\n<h4 id=\"创建代码仓库\"><a href=\"#创建代码仓库\" class=\"headerlink\" title=\"创建代码仓库\"></a>创建代码仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）在当前文件夹创建仓库 </span><br><span class=\"line\">$ git init </span><br><span class=\"line\"></span><br><span class=\"line\">2）新建文件夹并创建仓库</span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\">3）克隆远程分支，默认为master分支</span><br><span class=\"line\">$ git clone [url] -b [branch-name] [your-folder]</span><br><span class=\"line\">// 克隆远程dev分支到MyProject</span><br><span class=\"line\">例: $ git clone https://github.com/fengyueran/Test.git -b dev MyProject</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>通过git config可以配置git的环境变量，这些变量存在三个不同的地方</p>\n<ul>\n<li>/etc/gitconfig文件：适用于所有用户。</li>\n<li>~/.gitconfig文件：适用于当前用户。</li>\n<li>.git/config文件：\b当前项目中的配置文件，适用于当前项目。</li>\n</ul>\n<p>每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆/etc/gitconfig中的同名变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）查看配置信息(包括用户名、邮箱等)</span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\">2）编辑配置文件(--system/global)</span><br><span class=\"line\">$ git config -e </span><br><span class=\"line\">// 编辑当前用户的配置文件, --global:适用于当前用户， --system:适用于所有用户，不带参数: 当前项目</span><br><span class=\"line\">例: $ git config -e --global</span><br><span class=\"line\"></span><br><span class=\"line\">3）设置当前用户信息</span><br><span class=\"line\">$ git config --global user.name &quot;[name]&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;[email address]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">4）清除当前用户信息</span><br><span class=\"line\">$ git config --unset --global user.name &quot;[name]&quot;</span><br><span class=\"line\">$ git config --unset --global user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件\b操作\"></a>文件\b操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）添加文件file1，file2...到暂存区</span><br><span class=\"line\">$ git add [file1] [file2]</span><br><span class=\"line\"></span><br><span class=\"line\">2）添加当前目录所有文件到暂存区</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\">3) 添加目录(包括子目录)到暂存区</span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\">4) 删除当前目录没有track过的文件</span><br><span class=\"line\">$ git clean -f</span><br><span class=\"line\"></span><br><span class=\"line\">5) 删除当前目录没有track过的文件和文件夹</span><br><span class=\"line\">$ git clean -df</span><br><span class=\"line\"></span><br><span class=\"line\">6) 删除所有本地未提交的修改</span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\">7）提交暂存区到仓库区 </span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\">8）追加到上一次提交 </span><br><span class=\"line\">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）查看当前分支及其所有父类的提交历史</span><br><span class=\"line\">$ git log </span><br><span class=\"line\"></span><br><span class=\"line\">2）可以查看所有分支的所有操作记录(包括已经被删除的commit记录和reset操作）</span><br><span class=\"line\">$ git reflog</span><br><span class=\"line\"></span><br><span class=\"line\">3）查看变更的文件</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\">4）查看b\b提交相对a提交的差异</span><br><span class=\"line\">$ git diff [a-commit] [b-commit]</span><br><span class=\"line\"></span><br><span class=\"line\">5）查看工作区与最新commit的前一次commit的差异，当从远程拉取更新时即可查看变动的内容。</span><br><span class=\"line\">$ git diff HEAD^</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）列出远程仓库名</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\"></span><br><span class=\"line\">2）列出远程仓库名及对应的地址</span><br><span class=\"line\">$ git remote –v  </span><br><span class=\"line\">-&gt; origin\tgit@github.com:fengyueran/iOSNote.git (fetch)</span><br><span class=\"line\">-&gt; origin\tgit@github.com:fengyueran/iOSNote.git (push)</span><br><span class=\"line\"></span><br><span class=\"line\">3）推送当前本地分支到远程分支</span><br><span class=\"line\">$ git push [remote-repository-name] [branch-name]</span><br><span class=\"line\">// 将当前分支dev推送到远程仓库origin的remoteDev分支</span><br><span class=\"line\">例: $ git push origin dev:remoteDev</span><br><span class=\"line\"> -&gt;   * [new branch]      dev -&gt; remoteDev</span><br><span class=\"line\">// 省略远程仓库分支名则在远程创建当前同名分支dev</span><br><span class=\"line\">例: $ git push origin dev</span><br><span class=\"line\"> -&gt;   * [new branch]      dev -&gt; dev</span><br><span class=\"line\"></span><br><span class=\"line\">4）删除远程仓库origin的分支dev</span><br><span class=\"line\">例: $ git push origin --delete dev</span><br><span class=\"line\"></span><br><span class=\"line\">5）添加远程仓库</span><br><span class=\"line\">$ git remote add [repository] [url]</span><br><span class=\"line\">// 在远程添加名为pb的仓库</span><br><span class=\"line\">例: $ git remote add pb git://github.com/fengyueran/test.git</span><br><span class=\"line\"></span><br><span class=\"line\">6) 拉取远端数据</span><br><span class=\"line\">// 使你与另一仓库同步，提取你本地所没有的数据，不merge，拉取下来的数据在.git/FETCH_HEAD下</span><br><span class=\"line\">$ git fetch </span><br><span class=\"line\">// 将你的仓库与远端仓库origin同步，提取所有它独有的数据到本地分支以合并或者怎样。</span><br><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">// 下面的fetch操作使用远程dev分支在本地创建localDev分支(但不会切换到该分支)，如果本地不存在localDev分支,则会自动创建一个新的localDev分支,</span><br><span class=\"line\">如果本地存在localDev分支, 并且是`fast forward&apos;, 则自动合并两个分支, 否则, 会阻止以上操作。</span><br><span class=\"line\">$ git fetch origin dev:localDev</span><br><span class=\"line\">-&gt; * [new branch]      dev        -&gt; localDev</span><br><span class=\"line\"></span><br><span class=\"line\">7）从远程仓库提取数据并尝试合并到当前分支</span><br><span class=\"line\">// 基本上，该命令就是在git fetch之后紧接着git merge远端分支到当前分支</span><br><span class=\"line\">$ git pull </span><br><span class=\"line\"></span><br><span class=\"line\">//当新建分支时，如果直接pull或push需要参数远程仓库名和分支名</span><br><span class=\"line\">$ git pull origin dev</span><br><span class=\"line\">如果想省略仓库名和分支名则需要建立追踪关系，执行如下命令</span><br><span class=\"line\">$ git pull --set-upstream origin dev</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点, 因而能产生一个更为整洁的提交历史</span><br><span class=\"line\">$ git pull --rebase</span><br><span class=\"line\">//假设提交线图在执行pull前是这样的：</span><br><span class=\"line\">      C1---D1---E1  remotes/origin/master</span><br><span class=\"line\">      /</span><br><span class=\"line\">  A---B---C2---D2  master</span><br><span class=\"line\">执行git pull则提交线图会变成这样：</span><br><span class=\"line\">      C1---D1---E1  remotes/origin/master</span><br><span class=\"line\">      /          \\</span><br><span class=\"line\">  A---B---C2---D2-F  master</span><br><span class=\"line\">即会产生一个多余的合并历史，</span><br><span class=\"line\">如果执行git pull --rebase则提交线图会变成这样：</span><br><span class=\"line\">    remotes/origin/master</span><br><span class=\"line\">                  |</span><br><span class=\"line\">  A---B---C1---D1---C2&apos;---D2&apos;  master</span><br><span class=\"line\">可以看到，应用rebase则不会有新的提交F。C2,D2删除后重新提交为C2&apos;,D2&apos;了。</span><br></pre></td></tr></table></figure>\n<h4 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）查看本地分支</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\">2）查看远程分支,远程分支会用红色表示出来(如果你开了颜色支持的话）</span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\">3）新建分支</span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\">例: $ git branch dev</span><br><span class=\"line\"></span><br><span class=\"line\">4）切换分支</span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\">例: $ git checkout dev</span><br><span class=\"line\"></span><br><span class=\"line\">5）新建并切换分支 </span><br><span class=\"line\">$ git checkout -b [branch-name]</span><br><span class=\"line\">// 当前分支的记录都会到新分支dev上</span><br><span class=\"line\">例: $ git checkout -b dev</span><br><span class=\"line\"></span><br><span class=\"line\">6）删除分支 </span><br><span class=\"line\">$ git branch -D [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\">7）叫起合并冲突工具kdiff3</span><br><span class=\"line\">$ git mergetool -t kdiff3</span><br><span class=\"line\"></span><br><span class=\"line\">8) 合并某个分支到当前分支</span><br><span class=\"line\">// 如果不是`fast forward&apos;则会产生合并的提交历史</span><br><span class=\"line\">$ git merge [branch-name]</span><br><span class=\"line\">// 将hotfix分支合并到当前分支</span><br><span class=\"line\">例: $ git merge hotfix</span><br><span class=\"line\">// 无论是否是`fast forward&apos;都产生合并的提交历史</span><br><span class=\"line\">例: $ git merge hotfix --no-f</span><br><span class=\"line\"></span><br><span class=\"line\">9) 选择任意一个commit，合并进当前分支</span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\">10）合并提交历史 </span><br><span class=\"line\">// 当我们由master分支切换到新的分支dev工作，工作结束后想merge回master，如果直接在master应用git merge dev，</span><br><span class=\"line\">dev的提交历史就会出现在master中，有时这些记录很琐碎没有必要添加到master上，用squash就能解决这一问题。</span><br><span class=\"line\">a:squash后dev上的提交就变成了新的文件</span><br><span class=\"line\">  $ git merge --squash dev</span><br><span class=\"line\">b:重新commit代替之前所有提交</span><br><span class=\"line\">  $ git commit -m &quot;dev&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）储存临时文件</span><br><span class=\"line\">//当工作区有未提交的文件，又想切换到另一个branch时就可以用git stash暂时存储</span><br><span class=\"line\">$ git stash </span><br><span class=\"line\"></span><br><span class=\"line\">2）查看存储了哪些文件</span><br><span class=\"line\">$ git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">3）应用存储的临时文件</span><br><span class=\"line\">// 当回到之前的dirty工作区时可以通过git stash apply来恢复之前未提交的文件，也可以在其他branch应用这些存储的临时文件</span><br><span class=\"line\">$ git stash apply</span><br><span class=\"line\"></span><br><span class=\"line\">4) 让单个文件回退到指定的版本</span><br><span class=\"line\">a:进入到文件所在文件目录，或者能找到文件的路径</span><br><span class=\"line\">  $ git reflog test.js</span><br><span class=\"line\">  -&gt; 60e207a (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: test.js +2</span><br><span class=\"line\">     1435819 HEAD@&#123;1&#125;: commit: test.js +1</span><br><span class=\"line\">b:回退到指定的版本</span><br><span class=\"line\">  $  git reset 1435819 test.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 轻量级tag</span><br><span class=\"line\">$ git tag [version]</span><br><span class=\"line\">例: $ git tag v1.0.0</span><br><span class=\"line\"> </span><br><span class=\"line\">2) 创建一个含附注类型的标签非常简单</span><br><span class=\"line\">$ git tag -a [version] -m &quot;[detail]&quot;</span><br><span class=\"line\">$ git tag -a v1.1.1 -m &quot;CuraCloudMI version 1.1.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">3) 查看tag</span><br><span class=\"line\">$ git show [version]</span><br><span class=\"line\"></span><br><span class=\"line\">4) 删除tag</span><br><span class=\"line\">git tag -d [version]</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 查看某个命令的帮助</span><br><span class=\"line\">git help [command-name]</span><br><span class=\"line\"></span><br><span class=\"line\">2) 保留空文件</span><br><span class=\"line\">在空文件夹中新建.gitkeep文件</span><br><span class=\"line\"></span><br><span class=\"line\">3) 忽略某些文件</span><br><span class=\"line\">在.gitignore文件中添加需要忽略的文件夹或文件</span><br><span class=\"line\">例: </span><br><span class=\"line\">//忽略Pods文件夹下的所有文件</span><br><span class=\"line\">platforms/ios/Pods</span><br><span class=\"line\"></span><br><span class=\"line\">//忽略www下的所有文件除了plugins</span><br><span class=\"line\">platforms/ios/www/*</span><br><span class=\"line\">!platforms/ios/www/plugins</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>git的命令很多，为了减少后续查询的时间在这里列出了平常用到的一些命令。关于这些命令我们对git需要有一个基本的认识，如下图，git分为了几个区：</p>\n<p><div align=\"center\"><br><img src=\"/assets/gitSketch.png\" alt=\"git structure sketch\"></div></p>\n<h4 id=\"创建代码仓库\"><a href=\"#创建代码仓库\" class=\"headerlink\" title=\"创建代码仓库\"></a>创建代码仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）在当前文件夹创建仓库 </span><br><span class=\"line\">$ git init </span><br><span class=\"line\"></span><br><span class=\"line\">2）新建文件夹并创建仓库</span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\">3）克隆远程分支，默认为master分支</span><br><span class=\"line\">$ git clone [url] -b [branch-name] [your-folder]</span><br><span class=\"line\">// 克隆远程dev分支到MyProject</span><br><span class=\"line\">例: $ git clone https://github.com/fengyueran/Test.git -b dev MyProject</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>通过git config可以配置git的环境变量，这些变量存在三个不同的地方</p>\n<ul>\n<li>/etc/gitconfig文件：适用于所有用户。</li>\n<li>~/.gitconfig文件：适用于当前用户。</li>\n<li>.git/config文件：\b当前项目中的配置文件，适用于当前项目。</li>\n</ul>\n<p>每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆/etc/gitconfig中的同名变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）查看配置信息(包括用户名、邮箱等)</span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\">2）编辑配置文件(--system/global)</span><br><span class=\"line\">$ git config -e </span><br><span class=\"line\">// 编辑当前用户的配置文件, --global:适用于当前用户， --system:适用于所有用户，不带参数: 当前项目</span><br><span class=\"line\">例: $ git config -e --global</span><br><span class=\"line\"></span><br><span class=\"line\">3）设置当前用户信息</span><br><span class=\"line\">$ git config --global user.name &quot;[name]&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;[email address]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">4）清除当前用户信息</span><br><span class=\"line\">$ git config --unset --global user.name &quot;[name]&quot;</span><br><span class=\"line\">$ git config --unset --global user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件\b操作\"></a>文件\b操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）添加文件file1，file2...到暂存区</span><br><span class=\"line\">$ git add [file1] [file2]</span><br><span class=\"line\"></span><br><span class=\"line\">2）添加当前目录所有文件到暂存区</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\">3) 添加目录(包括子目录)到暂存区</span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\">4) 删除当前目录没有track过的文件</span><br><span class=\"line\">$ git clean -f</span><br><span class=\"line\"></span><br><span class=\"line\">5) 删除当前目录没有track过的文件和文件夹</span><br><span class=\"line\">$ git clean -df</span><br><span class=\"line\"></span><br><span class=\"line\">6) 删除所有本地未提交的修改</span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\">7）提交暂存区到仓库区 </span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\">8）追加到上一次提交 </span><br><span class=\"line\">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）查看当前分支及其所有父类的提交历史</span><br><span class=\"line\">$ git log </span><br><span class=\"line\"></span><br><span class=\"line\">2）可以查看所有分支的所有操作记录(包括已经被删除的commit记录和reset操作）</span><br><span class=\"line\">$ git reflog</span><br><span class=\"line\"></span><br><span class=\"line\">3）查看变更的文件</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\">4）查看b\b提交相对a提交的差异</span><br><span class=\"line\">$ git diff [a-commit] [b-commit]</span><br><span class=\"line\"></span><br><span class=\"line\">5）查看工作区与最新commit的前一次commit的差异，当从远程拉取更新时即可查看变动的内容。</span><br><span class=\"line\">$ git diff HEAD^</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）列出远程仓库名</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\"></span><br><span class=\"line\">2）列出远程仓库名及对应的地址</span><br><span class=\"line\">$ git remote –v  </span><br><span class=\"line\">-&gt; origin\tgit@github.com:fengyueran/iOSNote.git (fetch)</span><br><span class=\"line\">-&gt; origin\tgit@github.com:fengyueran/iOSNote.git (push)</span><br><span class=\"line\"></span><br><span class=\"line\">3）推送当前本地分支到远程分支</span><br><span class=\"line\">$ git push [remote-repository-name] [branch-name]</span><br><span class=\"line\">// 将当前分支dev推送到远程仓库origin的remoteDev分支</span><br><span class=\"line\">例: $ git push origin dev:remoteDev</span><br><span class=\"line\"> -&gt;   * [new branch]      dev -&gt; remoteDev</span><br><span class=\"line\">// 省略远程仓库分支名则在远程创建当前同名分支dev</span><br><span class=\"line\">例: $ git push origin dev</span><br><span class=\"line\"> -&gt;   * [new branch]      dev -&gt; dev</span><br><span class=\"line\"></span><br><span class=\"line\">4）删除远程仓库origin的分支dev</span><br><span class=\"line\">例: $ git push origin --delete dev</span><br><span class=\"line\"></span><br><span class=\"line\">5）添加远程仓库</span><br><span class=\"line\">$ git remote add [repository] [url]</span><br><span class=\"line\">// 在远程添加名为pb的仓库</span><br><span class=\"line\">例: $ git remote add pb git://github.com/fengyueran/test.git</span><br><span class=\"line\"></span><br><span class=\"line\">6) 拉取远端数据</span><br><span class=\"line\">// 使你与另一仓库同步，提取你本地所没有的数据，不merge，拉取下来的数据在.git/FETCH_HEAD下</span><br><span class=\"line\">$ git fetch </span><br><span class=\"line\">// 将你的仓库与远端仓库origin同步，提取所有它独有的数据到本地分支以合并或者怎样。</span><br><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">// 下面的fetch操作使用远程dev分支在本地创建localDev分支(但不会切换到该分支)，如果本地不存在localDev分支,则会自动创建一个新的localDev分支,</span><br><span class=\"line\">如果本地存在localDev分支, 并且是`fast forward&apos;, 则自动合并两个分支, 否则, 会阻止以上操作。</span><br><span class=\"line\">$ git fetch origin dev:localDev</span><br><span class=\"line\">-&gt; * [new branch]      dev        -&gt; localDev</span><br><span class=\"line\"></span><br><span class=\"line\">7）从远程仓库提取数据并尝试合并到当前分支</span><br><span class=\"line\">// 基本上，该命令就是在git fetch之后紧接着git merge远端分支到当前分支</span><br><span class=\"line\">$ git pull </span><br><span class=\"line\"></span><br><span class=\"line\">//当新建分支时，如果直接pull或push需要参数远程仓库名和分支名</span><br><span class=\"line\">$ git pull origin dev</span><br><span class=\"line\">如果想省略仓库名和分支名则需要建立追踪关系，执行如下命令</span><br><span class=\"line\">$ git pull --set-upstream origin dev</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点, 因而能产生一个更为整洁的提交历史</span><br><span class=\"line\">$ git pull --rebase</span><br><span class=\"line\">//假设提交线图在执行pull前是这样的：</span><br><span class=\"line\">      C1---D1---E1  remotes/origin/master</span><br><span class=\"line\">      /</span><br><span class=\"line\">  A---B---C2---D2  master</span><br><span class=\"line\">执行git pull则提交线图会变成这样：</span><br><span class=\"line\">      C1---D1---E1  remotes/origin/master</span><br><span class=\"line\">      /          \\</span><br><span class=\"line\">  A---B---C2---D2-F  master</span><br><span class=\"line\">即会产生一个多余的合并历史，</span><br><span class=\"line\">如果执行git pull --rebase则提交线图会变成这样：</span><br><span class=\"line\">    remotes/origin/master</span><br><span class=\"line\">                  |</span><br><span class=\"line\">  A---B---C1---D1---C2&apos;---D2&apos;  master</span><br><span class=\"line\">可以看到，应用rebase则不会有新的提交F。C2,D2删除后重新提交为C2&apos;,D2&apos;了。</span><br></pre></td></tr></table></figure>\n<h4 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）查看本地分支</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\">2）查看远程分支,远程分支会用红色表示出来(如果你开了颜色支持的话）</span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\">3）新建分支</span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\">例: $ git branch dev</span><br><span class=\"line\"></span><br><span class=\"line\">4）切换分支</span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\">例: $ git checkout dev</span><br><span class=\"line\"></span><br><span class=\"line\">5）新建并切换分支 </span><br><span class=\"line\">$ git checkout -b [branch-name]</span><br><span class=\"line\">// 当前分支的记录都会到新分支dev上</span><br><span class=\"line\">例: $ git checkout -b dev</span><br><span class=\"line\"></span><br><span class=\"line\">6）删除分支 </span><br><span class=\"line\">$ git branch -D [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\">7）叫起合并冲突工具kdiff3</span><br><span class=\"line\">$ git mergetool -t kdiff3</span><br><span class=\"line\"></span><br><span class=\"line\">8) 合并某个分支到当前分支</span><br><span class=\"line\">// 如果不是`fast forward&apos;则会产生合并的提交历史</span><br><span class=\"line\">$ git merge [branch-name]</span><br><span class=\"line\">// 将hotfix分支合并到当前分支</span><br><span class=\"line\">例: $ git merge hotfix</span><br><span class=\"line\">// 无论是否是`fast forward&apos;都产生合并的提交历史</span><br><span class=\"line\">例: $ git merge hotfix --no-f</span><br><span class=\"line\"></span><br><span class=\"line\">9) 选择任意一个commit，合并进当前分支</span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\">10）合并提交历史 </span><br><span class=\"line\">// 当我们由master分支切换到新的分支dev工作，工作结束后想merge回master，如果直接在master应用git merge dev，</span><br><span class=\"line\">dev的提交历史就会出现在master中，有时这些记录很琐碎没有必要添加到master上，用squash就能解决这一问题。</span><br><span class=\"line\">a:squash后dev上的提交就变成了新的文件</span><br><span class=\"line\">  $ git merge --squash dev</span><br><span class=\"line\">b:重新commit代替之前所有提交</span><br><span class=\"line\">  $ git commit -m &quot;dev&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）储存临时文件</span><br><span class=\"line\">//当工作区有未提交的文件，又想切换到另一个branch时就可以用git stash暂时存储</span><br><span class=\"line\">$ git stash </span><br><span class=\"line\"></span><br><span class=\"line\">2）查看存储了哪些文件</span><br><span class=\"line\">$ git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">3）应用存储的临时文件</span><br><span class=\"line\">// 当回到之前的dirty工作区时可以通过git stash apply来恢复之前未提交的文件，也可以在其他branch应用这些存储的临时文件</span><br><span class=\"line\">$ git stash apply</span><br><span class=\"line\"></span><br><span class=\"line\">4) 让单个文件回退到指定的版本</span><br><span class=\"line\">a:进入到文件所在文件目录，或者能找到文件的路径</span><br><span class=\"line\">  $ git reflog test.js</span><br><span class=\"line\">  -&gt; 60e207a (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: test.js +2</span><br><span class=\"line\">     1435819 HEAD@&#123;1&#125;: commit: test.js +1</span><br><span class=\"line\">b:回退到指定的版本</span><br><span class=\"line\">  $  git reset 1435819 test.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 轻量级tag</span><br><span class=\"line\">$ git tag [version]</span><br><span class=\"line\">例: $ git tag v1.0.0</span><br><span class=\"line\"> </span><br><span class=\"line\">2) 创建一个含附注类型的标签非常简单</span><br><span class=\"line\">$ git tag -a [version] -m &quot;[detail]&quot;</span><br><span class=\"line\">$ git tag -a v1.1.1 -m &quot;CuraCloudMI version 1.1.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">3) 查看tag</span><br><span class=\"line\">$ git show [version]</span><br><span class=\"line\"></span><br><span class=\"line\">4) 删除tag</span><br><span class=\"line\">git tag -d [version]</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 查看某个命令的帮助</span><br><span class=\"line\">git help [command-name]</span><br><span class=\"line\"></span><br><span class=\"line\">2) 保留空文件</span><br><span class=\"line\">在空文件夹中新建.gitkeep文件</span><br><span class=\"line\"></span><br><span class=\"line\">3) 忽略某些文件</span><br><span class=\"line\">在.gitignore文件中添加需要忽略的文件夹或文件</span><br><span class=\"line\">例: </span><br><span class=\"line\">//忽略Pods文件夹下的所有文件</span><br><span class=\"line\">platforms/ios/Pods</span><br><span class=\"line\"></span><br><span class=\"line\">//忽略www下的所有文件除了plugins</span><br><span class=\"line\">platforms/ios/www/*</span><br><span class=\"line\">!platforms/ios/www/plugins</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"React最佳实践","tagline":"Supporting tagline","description":"Git作为一种流行的版本管理系统已经广泛应用于我们的日常开发中，在这里记录下日常遇到的关于git的常见用法，以备后续查询。","date":"2017-07-24T15:30:09.000Z","_content":"##### 引入css\n\n直接引入组件对应的css以便于修改\n```\n//before\nbuild到一个main.css, 在主html引入\n\n//recommend\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './infocard.css';\n```\n\n##### 初始化State\nes7语法定义state更简洁\n```\n//before\nclass Main extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n  render() {\n\n  }\n} \n\n// recommend\nclass Main extends React.Component {\n  state = { step: 0 }\n  render() {\n\n  }\n} \n\n```\n##### propTypes书写顺序\n\n\n\n```\n//before\nclass Main extends React.Component {\n  render() {\n\n  }\n} \nMain.propTypes = {\n}\nMain.defaultTypes = {\n}\n\n//recommend\nclass Main extends React.Component {\n  static propTypes = {\n\n  }\n  static defaultTypes = {\n    \n  }\n  render() {\n\n  }\n}\n\nconst mainProps = {};\nconst Main = () => {\n  return() {\n\n  }\n}\nMain.propTypes = mainProps;\n```\n\n##### 用箭头函数绑定this\n\nReact.Component创建组件时，类中的方法并不会绑定this而需要显示绑定，如下，用箭头函数可以自动绑定(es6语法糖)this。\n```\n//before\nconstructor() {\n  this.handleClick = this.handleClick.bind(this);\n}\n<div onClick={this.handleClick.bind(this)}>\n\n//recommend\nconst handleClick = () => {}\n\n```\n\n##### setState接受函数参数\nreact设计时为了性能上的优化，采取了批次的思想，每次更改state并不直接更新，而是收到一波state合并后才更新，是一个异步的过程，所以当需要前一个state做后续运算时应该传一个函数而不是对象，如下就可以避免这一问题。\n\n```\n//before\nthis.setState({ num: 1 }) \nconsole.log(this.state.num) //undefined\n\n//recommend\nthis.setState((preState, props) => ({ num: 1 })); \nthis.setState((preState, props) => ({ num: preState.num + 1 })); \n最后this.state.num为2\n```\n\n##### 使用 Get/Set访问器属性 来做数据处理\n\n如果需要在组件内做数据处理尽量使用Get/Set\n```\n  // recommend\n  getSpeed () {\n    return `${this.props.speed} m/s`;\n  }\n \n  // re\n  get speed () {\n    return `${this.props.firstName} m/s`;\n  }\n```\n\n##### 避免传递新的闭包给子组件\n\n这里的闭包指通过这种形式(() => { alert('hit my heart');})创建的函数，每次父组件render时都会生成新的闭包，给子组件传递一个新的闭包prop，从而导致子组件重绘，即使子组件其他props并未更新。\n```\n//before\nclass Main extends React.Component {\n  render() {\n     <ViewHeart \n      onClick={() => {\n        alert('hit my heart');\n      }} />\n  }\n} \n\n//recommend\nclass Main extends React.Component {\n  hitMyHeart = () => {\n    alert('hit my heart');\n  }\n  render() {\n     <ViewHeart \n      onClick={this.hitMyHeart} />\n  }\n}\n```\n\n##### 尽量使用函数式组件\n\n函数式组件没有生命周期管理或状态管理，易于调试，不需要分配特定的内存。此外函数式组件尽量不用箭头函数，因其为匿名函数，错误很可能以<< anonymous >>的方式呈现，难以调试。\n```\n//before\nclass Main extends React.Component {\n  render() {\n\n  }\n} \n\n//bad\nconst Main = () => {\n  return {\n\n  }\n} \n\n// recommend\nfunction Main() {\n  return {\n\n  }\n} \n```\n\n##### 布尔类型判断是否渲染的书写\n\n如下当用一个布尔判断是否渲染时不需要用三目运算符，&&更简洁。\n\n```\n//before\n{\n  isActive ? <Active /> : null\n}\n\n//recommend\n{\n  isActive && <Active />\n}\n```\n\n##### 必要的时候用高阶组件\n\n无状态函数组件与高阶组件结合能使代码层次更加清晰，分工明确，调试更加容易。如下通过函数withMain将无状态组件WrappedComponent包裹了一层，这一层负责管理state或生命周期WrappedComponent只负责显示。\n\n```\nconst withMain = (mapPropsToData, WrappedComponent) => {\n  class MainWrapper extends React.Component {\n    componentDidMount() {}\n\n    componentWillUnmount() {}\n\n    shouldComponentUpdate(nextProps) {\n      return nextProps !== this.props;\n    }\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n\n@withMain({ title: '高阶组件' })\nclass Main extends React.Component {\n  render() {\n\n  }\n} \n\n```\n\n\n\n\n\n","source":"_posts/react最佳实践.md","raw":"---\nlayout: post\ntitle: React最佳实践\ncategory : react\ntagline: \"Supporting tagline\"\ntags : [react]\ndescription: Git作为一种流行的版本管理系统已经广泛应用于我们的日常开发中，在这里记录下日常遇到的关于git的常见用法，以备后续查询。\ndate: 2017-7-24 23:30:09\n---\n##### 引入css\n\n直接引入组件对应的css以便于修改\n```\n//before\nbuild到一个main.css, 在主html引入\n\n//recommend\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './infocard.css';\n```\n\n##### 初始化State\nes7语法定义state更简洁\n```\n//before\nclass Main extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n  render() {\n\n  }\n} \n\n// recommend\nclass Main extends React.Component {\n  state = { step: 0 }\n  render() {\n\n  }\n} \n\n```\n##### propTypes书写顺序\n\n\n\n```\n//before\nclass Main extends React.Component {\n  render() {\n\n  }\n} \nMain.propTypes = {\n}\nMain.defaultTypes = {\n}\n\n//recommend\nclass Main extends React.Component {\n  static propTypes = {\n\n  }\n  static defaultTypes = {\n    \n  }\n  render() {\n\n  }\n}\n\nconst mainProps = {};\nconst Main = () => {\n  return() {\n\n  }\n}\nMain.propTypes = mainProps;\n```\n\n##### 用箭头函数绑定this\n\nReact.Component创建组件时，类中的方法并不会绑定this而需要显示绑定，如下，用箭头函数可以自动绑定(es6语法糖)this。\n```\n//before\nconstructor() {\n  this.handleClick = this.handleClick.bind(this);\n}\n<div onClick={this.handleClick.bind(this)}>\n\n//recommend\nconst handleClick = () => {}\n\n```\n\n##### setState接受函数参数\nreact设计时为了性能上的优化，采取了批次的思想，每次更改state并不直接更新，而是收到一波state合并后才更新，是一个异步的过程，所以当需要前一个state做后续运算时应该传一个函数而不是对象，如下就可以避免这一问题。\n\n```\n//before\nthis.setState({ num: 1 }) \nconsole.log(this.state.num) //undefined\n\n//recommend\nthis.setState((preState, props) => ({ num: 1 })); \nthis.setState((preState, props) => ({ num: preState.num + 1 })); \n最后this.state.num为2\n```\n\n##### 使用 Get/Set访问器属性 来做数据处理\n\n如果需要在组件内做数据处理尽量使用Get/Set\n```\n  // recommend\n  getSpeed () {\n    return `${this.props.speed} m/s`;\n  }\n \n  // re\n  get speed () {\n    return `${this.props.firstName} m/s`;\n  }\n```\n\n##### 避免传递新的闭包给子组件\n\n这里的闭包指通过这种形式(() => { alert('hit my heart');})创建的函数，每次父组件render时都会生成新的闭包，给子组件传递一个新的闭包prop，从而导致子组件重绘，即使子组件其他props并未更新。\n```\n//before\nclass Main extends React.Component {\n  render() {\n     <ViewHeart \n      onClick={() => {\n        alert('hit my heart');\n      }} />\n  }\n} \n\n//recommend\nclass Main extends React.Component {\n  hitMyHeart = () => {\n    alert('hit my heart');\n  }\n  render() {\n     <ViewHeart \n      onClick={this.hitMyHeart} />\n  }\n}\n```\n\n##### 尽量使用函数式组件\n\n函数式组件没有生命周期管理或状态管理，易于调试，不需要分配特定的内存。此外函数式组件尽量不用箭头函数，因其为匿名函数，错误很可能以<< anonymous >>的方式呈现，难以调试。\n```\n//before\nclass Main extends React.Component {\n  render() {\n\n  }\n} \n\n//bad\nconst Main = () => {\n  return {\n\n  }\n} \n\n// recommend\nfunction Main() {\n  return {\n\n  }\n} \n```\n\n##### 布尔类型判断是否渲染的书写\n\n如下当用一个布尔判断是否渲染时不需要用三目运算符，&&更简洁。\n\n```\n//before\n{\n  isActive ? <Active /> : null\n}\n\n//recommend\n{\n  isActive && <Active />\n}\n```\n\n##### 必要的时候用高阶组件\n\n无状态函数组件与高阶组件结合能使代码层次更加清晰，分工明确，调试更加容易。如下通过函数withMain将无状态组件WrappedComponent包裹了一层，这一层负责管理state或生命周期WrappedComponent只负责显示。\n\n```\nconst withMain = (mapPropsToData, WrappedComponent) => {\n  class MainWrapper extends React.Component {\n    componentDidMount() {}\n\n    componentWillUnmount() {}\n\n    shouldComponentUpdate(nextProps) {\n      return nextProps !== this.props;\n    }\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n\n@withMain({ title: '高阶组件' })\nclass Main extends React.Component {\n  render() {\n\n  }\n} \n\n```\n\n\n\n\n\n","slug":"react最佳实践","published":1,"updated":"2018-05-07T05:24:41.000Z","comments":1,"photos":[],"link":"","_id":"cjj9krdp30005io0r5lywan6c","content":"<h5 id=\"引入css\"><a href=\"#引入css\" class=\"headerlink\" title=\"引入css\"></a>引入css</h5><p>直接引入组件对应的css以便于修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">build到一个main.css, 在主html引入</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\">import styles from &apos;./infocard.css&apos;;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"初始化State\"><a href=\"#初始化State\" class=\"headerlink\" title=\"初始化State\"></a>初始化State</h5><p>es7语法定义state更简洁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// recommend</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  state = &#123; step: 0 &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"propTypes书写顺序\"><a href=\"#propTypes书写顺序\" class=\"headerlink\" title=\"propTypes书写顺序\"></a>propTypes书写顺序</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">Main.propTypes = &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Main.defaultTypes = &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  static defaultTypes = &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mainProps = &#123;&#125;;</span><br><span class=\"line\">const Main = () =&gt; &#123;</span><br><span class=\"line\">  return() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Main.propTypes = mainProps;</span><br></pre></td></tr></table></figure>\n<h5 id=\"用箭头函数绑定this\"><a href=\"#用箭头函数绑定this\" class=\"headerlink\" title=\"用箭头函数绑定this\"></a>用箭头函数绑定this</h5><p>React.Component创建组件时，类中的方法并不会绑定this而需要显示绑定，如下，用箭头函数可以自动绑定(es6语法糖)this。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">constructor() &#123;</span><br><span class=\"line\">  this.handleClick = this.handleClick.bind(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">const handleClick = () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"setState接受函数参数\"><a href=\"#setState接受函数参数\" class=\"headerlink\" title=\"setState接受函数参数\"></a>setState接受函数参数</h5><p>react设计时为了性能上的优化，采取了批次的思想，每次更改state并不直接更新，而是收到一波state合并后才更新，是一个异步的过程，所以当需要前一个state做后续运算时应该传一个函数而不是对象，如下就可以避免这一问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">this.setState(&#123; num: 1 &#125;) </span><br><span class=\"line\">console.log(this.state.num) //undefined</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">this.setState((preState, props) =&gt; (&#123; num: 1 &#125;)); </span><br><span class=\"line\">this.setState((preState, props) =&gt; (&#123; num: preState.num + 1 &#125;)); </span><br><span class=\"line\">最后this.state.num为2</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用-Get-Set访问器属性-来做数据处理\"><a href=\"#使用-Get-Set访问器属性-来做数据处理\" class=\"headerlink\" title=\"使用 Get/Set访问器属性 来做数据处理\"></a>使用 Get/Set访问器属性 来做数据处理</h5><p>如果需要在组件内做数据处理尽量使用Get/Set<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// recommend</span><br><span class=\"line\">getSpeed () &#123;</span><br><span class=\"line\">  return `$&#123;this.props.speed&#125; m/s`;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// re</span><br><span class=\"line\">get speed () &#123;</span><br><span class=\"line\">  return `$&#123;this.props.firstName&#125; m/s`;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"避免传递新的闭包给子组件\"><a href=\"#避免传递新的闭包给子组件\" class=\"headerlink\" title=\"避免传递新的闭包给子组件\"></a>避免传递新的闭包给子组件</h5><p>这里的闭包指通过这种形式(() =&gt; { alert(‘hit my heart’);})创建的函数，每次父组件render时都会生成新的闭包，给子组件传递一个新的闭包prop，从而导致子组件重绘，即使子组件其他props并未更新。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">     &lt;ViewHeart </span><br><span class=\"line\">      onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">        alert(&apos;hit my heart&apos;);</span><br><span class=\"line\">      &#125;&#125; /&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  hitMyHeart = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;hit my heart&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">     &lt;ViewHeart </span><br><span class=\"line\">      onClick=&#123;this.hitMyHeart&#125; /&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"尽量使用函数式组件\"><a href=\"#尽量使用函数式组件\" class=\"headerlink\" title=\"尽量使用函数式组件\"></a>尽量使用函数式组件</h5><p>函数式组件没有生命周期管理或状态管理，易于调试，不需要分配特定的内存。此外函数式组件尽量不用箭头函数，因其为匿名函数，错误很可能以&lt;&lt; anonymous &gt;&gt;的方式呈现，难以调试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//bad</span><br><span class=\"line\">const Main = () =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// recommend</span><br><span class=\"line\">function Main() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"布尔类型判断是否渲染的书写\"><a href=\"#布尔类型判断是否渲染的书写\" class=\"headerlink\" title=\"布尔类型判断是否渲染的书写\"></a>布尔类型判断是否渲染的书写</h5><p>如下当用一个布尔判断是否渲染时不需要用三目运算符，&amp;&amp;更简洁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  isActive ? &lt;Active /&gt; : null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  isActive &amp;&amp; &lt;Active /&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"必要的时候用高阶组件\"><a href=\"#必要的时候用高阶组件\" class=\"headerlink\" title=\"必要的时候用高阶组件\"></a>必要的时候用高阶组件</h5><p>无状态函数组件与高阶组件结合能使代码层次更加清晰，分工明确，调试更加容易。如下通过函数withMain将无状态组件WrappedComponent包裹了一层，这一层负责管理state或生命周期WrappedComponent只负责显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const withMain = (mapPropsToData, WrappedComponent) =&gt; &#123;</span><br><span class=\"line\">  class MainWrapper extends React.Component &#123;</span><br><span class=\"line\">    componentDidMount() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shouldComponentUpdate(nextProps) &#123;</span><br><span class=\"line\">      return nextProps !== this.props;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;WrappedComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@withMain(&#123; title: &apos;高阶组件&apos; &#125;)</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"引入css\"><a href=\"#引入css\" class=\"headerlink\" title=\"引入css\"></a>引入css</h5><p>直接引入组件对应的css以便于修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">build到一个main.css, 在主html引入</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\">import styles from &apos;./infocard.css&apos;;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"初始化State\"><a href=\"#初始化State\" class=\"headerlink\" title=\"初始化State\"></a>初始化State</h5><p>es7语法定义state更简洁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// recommend</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  state = &#123; step: 0 &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"propTypes书写顺序\"><a href=\"#propTypes书写顺序\" class=\"headerlink\" title=\"propTypes书写顺序\"></a>propTypes书写顺序</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">Main.propTypes = &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Main.defaultTypes = &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  static defaultTypes = &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mainProps = &#123;&#125;;</span><br><span class=\"line\">const Main = () =&gt; &#123;</span><br><span class=\"line\">  return() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Main.propTypes = mainProps;</span><br></pre></td></tr></table></figure>\n<h5 id=\"用箭头函数绑定this\"><a href=\"#用箭头函数绑定this\" class=\"headerlink\" title=\"用箭头函数绑定this\"></a>用箭头函数绑定this</h5><p>React.Component创建组件时，类中的方法并不会绑定this而需要显示绑定，如下，用箭头函数可以自动绑定(es6语法糖)this。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">constructor() &#123;</span><br><span class=\"line\">  this.handleClick = this.handleClick.bind(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">const handleClick = () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"setState接受函数参数\"><a href=\"#setState接受函数参数\" class=\"headerlink\" title=\"setState接受函数参数\"></a>setState接受函数参数</h5><p>react设计时为了性能上的优化，采取了批次的思想，每次更改state并不直接更新，而是收到一波state合并后才更新，是一个异步的过程，所以当需要前一个state做后续运算时应该传一个函数而不是对象，如下就可以避免这一问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">this.setState(&#123; num: 1 &#125;) </span><br><span class=\"line\">console.log(this.state.num) //undefined</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">this.setState((preState, props) =&gt; (&#123; num: 1 &#125;)); </span><br><span class=\"line\">this.setState((preState, props) =&gt; (&#123; num: preState.num + 1 &#125;)); </span><br><span class=\"line\">最后this.state.num为2</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用-Get-Set访问器属性-来做数据处理\"><a href=\"#使用-Get-Set访问器属性-来做数据处理\" class=\"headerlink\" title=\"使用 Get/Set访问器属性 来做数据处理\"></a>使用 Get/Set访问器属性 来做数据处理</h5><p>如果需要在组件内做数据处理尽量使用Get/Set<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// recommend</span><br><span class=\"line\">getSpeed () &#123;</span><br><span class=\"line\">  return `$&#123;this.props.speed&#125; m/s`;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// re</span><br><span class=\"line\">get speed () &#123;</span><br><span class=\"line\">  return `$&#123;this.props.firstName&#125; m/s`;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"避免传递新的闭包给子组件\"><a href=\"#避免传递新的闭包给子组件\" class=\"headerlink\" title=\"避免传递新的闭包给子组件\"></a>避免传递新的闭包给子组件</h5><p>这里的闭包指通过这种形式(() =&gt; { alert(‘hit my heart’);})创建的函数，每次父组件render时都会生成新的闭包，给子组件传递一个新的闭包prop，从而导致子组件重绘，即使子组件其他props并未更新。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">     &lt;ViewHeart </span><br><span class=\"line\">      onClick=&#123;() =&gt; &#123;</span><br><span class=\"line\">        alert(&apos;hit my heart&apos;);</span><br><span class=\"line\">      &#125;&#125; /&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  hitMyHeart = () =&gt; &#123;</span><br><span class=\"line\">    alert(&apos;hit my heart&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">     &lt;ViewHeart </span><br><span class=\"line\">      onClick=&#123;this.hitMyHeart&#125; /&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"尽量使用函数式组件\"><a href=\"#尽量使用函数式组件\" class=\"headerlink\" title=\"尽量使用函数式组件\"></a>尽量使用函数式组件</h5><p>函数式组件没有生命周期管理或状态管理，易于调试，不需要分配特定的内存。此外函数式组件尽量不用箭头函数，因其为匿名函数，错误很可能以&lt;&lt; anonymous &gt;&gt;的方式呈现，难以调试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">//bad</span><br><span class=\"line\">const Main = () =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// recommend</span><br><span class=\"line\">function Main() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"布尔类型判断是否渲染的书写\"><a href=\"#布尔类型判断是否渲染的书写\" class=\"headerlink\" title=\"布尔类型判断是否渲染的书写\"></a>布尔类型判断是否渲染的书写</h5><p>如下当用一个布尔判断是否渲染时不需要用三目运算符，&amp;&amp;更简洁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//before</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  isActive ? &lt;Active /&gt; : null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//recommend</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  isActive &amp;&amp; &lt;Active /&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"必要的时候用高阶组件\"><a href=\"#必要的时候用高阶组件\" class=\"headerlink\" title=\"必要的时候用高阶组件\"></a>必要的时候用高阶组件</h5><p>无状态函数组件与高阶组件结合能使代码层次更加清晰，分工明确，调试更加容易。如下通过函数withMain将无状态组件WrappedComponent包裹了一层，这一层负责管理state或生命周期WrappedComponent只负责显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const withMain = (mapPropsToData, WrappedComponent) =&gt; &#123;</span><br><span class=\"line\">  class MainWrapper extends React.Component &#123;</span><br><span class=\"line\">    componentDidMount() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shouldComponentUpdate(nextProps) &#123;</span><br><span class=\"line\">      return nextProps !== this.props;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;WrappedComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@withMain(&#123; title: &apos;高阶组件&apos; &#125;)</span><br><span class=\"line\">class Main extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"正则表达式","tagline":"Supporting tagline","description":"Git作为一种流行的版本管理系统已经广泛应用于我们的日常开发中，在这里记录下日常遇到的关于git的常见用法，以备后续查询。","date":"2017-07-24T15:30:09.000Z","_content":"\n##### 基本概念\n\n- 正则表达式\n  它描述了一种字符串匹配的模式，可以用来检查一个字符串是否包含\n```\n基本概念：\n元字符：在正则表达式中具有特殊含义的字符。\n```\n( ) [ ] { { \\ ^ $ | ? * + . < > - = !\n```\n\n子模式： 在正则表达式中，可以使用括号()将模式中的子字符串括起来，以形成一个子模式。将子模式视为一个整体时，那么它就相当于一个单个字符。\n\n正则表达式是包含在 两个斜杠之间 的一个或多个字符，在后一个斜杠的后面，可以指定一个或多个选项。\n\n var regExp = /pattern/flags\n其中，“pattern”为指定的匹配模式，flags为 0个 或多个可选项，这些选项及其含义如下：\n\ni：表示忽略大小写，就是在字符串匹配的时候不区分大小写。\ng：表示全局匹配，即匹配字符串中出现的所有模式。\nm：表示进行多行匹配。\n\n\n\nrunoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。\n\nrunoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。\n\ncolou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。\n\n\n\n所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \\: runo\\*ob 匹配 runo*ob。\n\n许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符\"转义\"，即，将反斜杠字符\\ 放在它们前面。下表列出了正则表达式中的特殊字符：\n\n\nvar str = \"123abc\";\nvar patt1 = /^[0-9]+abc$/;\nconsole.log(str.match(patt1)[0]);\n```\n\n^ 为匹配输入字符串的开始位置。\n\n[0-9]+匹配多个数字， [0-9] 匹配单个数字，+ 匹配一个或者多个。\n\nabc$匹配字母 abc 并以 abc 结尾，$ 为匹配输入字符串的结束位置。\n\n\n#### 常用符号的用法\n\n- \\ 标记其后的字符为特殊字符、转义字符\n  \n  如\\r代表回车符，\\b表示一个字符边界，反斜杠\\也可以将其后的特殊字符，转义为字面量,例如，模式 /a*/ 代表会匹配 0 个或者多个 a。相反，模式 /a\\*/ 将 '*' 的特殊性移除，从而可以匹配像 \"a*\" 这样的字符串。\\\\表示一个\\,第一个\\为转义字符，第二个\\为特殊字符\\。\n  \n- ^ 匹配输入的开始位置\n  如果多行标志为true时也匹配换行符后紧跟的位置。\n  \n  匹配以snow开头的字符串\n  ```\n  //如下patt/^snow/匹配snow is my name但不匹配my name is snow\n  var str = \"snow is my name\";\n  var patt = /^snow/;\n  console.log(str.match(patt));\n  ```\n- $ 匹配输入结束的位置\n  匹配输入的结束。如果多行标示为true时也匹配换行符前的位置。\n  匹配以snow结尾的字符串\n  ```\n  //如下patt/snow$/匹配my name is snow但不匹配snow is my name\n  var str = \"my name is snow\";\n  var patt = /snow$/;\n  console.log(str.match(patt));\n  ```\n  匹配snow这个字符串, 如下^$结合可以匹配snow(仅匹配snow，不匹配snow is snow)\n  ```\n  var str = \"snow\";\n  var patt = /^snow$/;\n  console.log(str.match(patt));\n  ```\n\n- | 类似与或，指明两项之间的一个选择\n  \n  匹配苹果或香蕉\n  ```\n  var str = \"banana\";\n  var patt = /apple|banana/;\n  console.log(str.match(patt));\n  ```\n- {n} 匹配前一项连续出现n次\n  如，/p{2}/不会匹配aple中的a,但会匹配apple中所有的p。\n  ```\n  var str = \"apple is a apple\";\n  var patt = /(apple){2}/;\n  console.log(str.match(patt)); => null\n\n  var str = \"appleapple 2 apple\";\n  var patt = /(apple){2}/;\n  console.log(str.match(patt)); => appleapple\n  ```\n- {m,n} 匹配前一项连续出现m到n次，包括m、n次\n    ```\n  var str = \"apple is a apple\";\n  var patt = /(apple){2,3}/;\n  console.log(str.match(patt)); => null\n\n  var str = \"appleapple 2 apple\";\n  var patt = /(apple){2,3}/;\n  console.log(str.match(patt)); => appleapple\n  ```\n- . 默认情况下, 句点匹配除新行符(换行符`\\n`和回车符`\\r`)外的任何单个字符\n\n  匹配snow_，如下/snow./可以匹配snow1，snowa，snow_等。\n  ```\n  var str = \"snow_\";\n  var patt = /snow./;\n  console.log(str.match(patt));\n  ```\n\n- * 匹配零个或多个前一项,等价于 {0,}。\n\n  匹配a，如下a*可以匹配aabc，aaaabc，甚至不包含 \"a\" 的任意字符串.\n  ```\n  var str = \"aaaabaac\";\n  var patt = /ba*/;\n  console.log(str.match(patt)) => baa\n  ```\n  通配符: 句点星号模式 .* 可以匹配零个或多个任意字符 (除了新行符: `r 和 `n). 例如, snow.*123 可以匹配 snowAnything123, 也能匹配 snow123.\n\n- +匹配前一项一个或多个,等价于 {1,}。 \n  例如，/p+/匹配了在 \"apppppple\" 中的 'p'，和在 \"caaaaaaandy\" 中所有的 'a'。\n  \n- ? 匹配零个或一个前面的字符，可以理解为\"前面的那项是可选的\". 例如, colou?r 可以匹配 color    和 colour, 因为 \"u\" 是可选的, abcd(efg)?hij可以匹配abchij和abcdefghij。\n\n\n- () 标记一个子表达式(分组)的开始和结束位置\n  每一个子表达式会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推\n  子表达式的结果可以获取供以后使用, 如下子表达式的值为phone\n  匹配apple出现了多次\n  ```\n  var str = \"apple is a iphone\";\n  var patt = /i(phone$)/;\n  console.log(str.match(patt));\n  => [ 'iphone', 'phone', index: 11, input: 'apple is a iphone' ]\n\n  var str = \"there is a iphonePlus called iphonePlus\";\n  var patt = /(iphone)(Plus).*\\1\\2$/; //\\1、\\2表示子表达式1、2的结果，及iphone、Plus\n  console.log(str.match(patt));\n  => [ 'iphonePlus called iphonePlus',\n       'iphone',\n       'Plus',\n       index: 11,\n       input: 'there is a iphonePlus called iphonePlus' ]\n\n  ```\n\n- (x) 匹配 'x' 并且记住匹配项，括号被称为 捕获括号。\n  ```\n  var str = \"there is a iphone called iphone\";\n  var patt = /(iphone).*\\1$/; //因为记住了匹配项，所有\\1能够拿到子表达式1的结果iphone\n  console.log(str.match(patt));\n  =>[ 'iphone called iphone',\n  'iphone',\n  index: 11,\n  input: 'there is a iphone called iphone' ]\n  ```\n\n- (?:x) 匹配 'x' 但是不记住匹配项。这种叫作非捕获括号\n  ```\n  var str = \"there is a iphone called iphone\";\n  var patt = /(?:iphone).*\\1$/; //因为没有记住匹配项，所有\\1不能拿到子表达式1的结果，匹配为null\n  console.log(str.match(patt));\n  =>null\n  ```\n- x(?=y)\t匹配'x'仅仅当'x'后面跟着'y'.这种叫做正向肯定查找。\n  ```\n var str = \"iphoneX and iphonePlus\";\n  var patt = /iphone(?=Plus)/; //匹配iphonePlus的iphone\n  console.log(str.match(patt));\n  =>[ 'iphone', index: 12, input: 'iphoneX and iphonePlus' ]\n  ```\n\n- x(?!y)匹配'x'仅仅当'x'后面不跟着'y',这个叫做正向否定查找。\n\n```\nvar str = \"iphoneX and iphonePlus\";\nvar patt = /iphone(?!Plus)/;//匹配iphoneX的iphone\nconsole.log(str.match(patt));\n=> [ 'iphone', index: 0, input: 'iphoneX and iphonePlus' ]\n```\n- [xyz]\n字符类：元字符[ 和 ]指定正则表达式中的字符类。\n字符类“[123]\"将匹配字符1，2或3.例如，字符串“man\"或“men\"将匹配正则表达式“m[ae]n\"。\n可以使用连字符-来指定字符范围，如[A-Z]表示所有大写任何字母;[0-9]表示0和9之间的任何数字。[a-ex-z]\t字符a到d或x到z，其将包括a，b，c，d, x，y或z。\n- [^xyz]\n一个反向字符集。^表示除也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。\n\n[^abc][^a-c] \t除a，b和c以外的字符\n\n- [\\b] 匹配一个退格(U+0008)。（不要和\\b混淆了。）\n\n- \\b 匹配一个单词的边界，一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者没有其他“字”字符在其前面的位置\n\n例子：\n\n/\\bm/匹配“moon”中得‘m’；\n\n/oo\\b/并不匹配\"moon\"中得'oo'，因为'oo'被一个“字”字符'n'紧跟着。\n\n/oon\\b/匹配\"moon\"中得'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。\n\n\\B 匹配一个非单词边界\n例如，/\\Bday/匹配\"noonday\"中的'oon', 而/y\\B./匹配\"possibly yesterday\"中的’ye‘\n\n- \\d\t\n匹配一个数字。\n\n等价于[0-9]。\n\n例如， /\\d/ 或者 /[0-9]/ 匹配\"B2 is the suite number.\"中的'2'。\n\n\\D\t\n匹配一个非数字字符。\n\n等价于[^0-9]。\n\n例如， /\\D/ 或者 /[^0-9]/ 匹配\"B2 is the suite number.\"中的'B' 。\n\n\\f\t匹配一个换页符 (U+000C)。\n\\n\t匹配一个换行符 (U+000A)。\n\\r\t匹配一个回车符 (U+000D)。\n\\s\t\n匹配一个空白字符，包括空格、制表符、换页符和换行符。\n\n等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n例如, /\\s\\w*/ 匹配\"foo bar.\"中的' bar'。\n\n\\S\t\n匹配一个非空白字符。\n\n等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n例如， /\\S\\w*/ 匹配\"foo bar.\"中的'foo'。\n\n\\t\t匹配一个水平制表符 (U+0009)。\n\\v\t匹配一个垂直制表符 (U+000B)。\n\\w\t\n匹配一个单字字符（字母、数字或者下划线）。\n\n等价于[A-Za-z0-9_]。\n\n例如, /\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。\n\n\\W\t\n匹配一个非单字字符。\n\n等价于[^A-Za-z0-9_]。\n\n例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 \"50%.\" 中的 '%'。\n\n\\n\t\n在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。\n\n比如 /apple(,)\\sorange\\1/ 匹配\"apple, orange, cherry, peach.\"中的'apple, orange,' 。\n\n\\0\t匹配 NULL (U+0000) 字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。\n\\xhh\t与代码 hh 匹配字符（两个十六进制数字）\n\\uhhhh\t与代码 hhhh 匹配字符（四个十六进制数字）。\n\n- ?#comment注释\n```\nvar patt = /\\/(?#匹配斜杠/)/;\n```\n\n\n\n\n匹配特殊字符(\\.*?+[{|()^$等)需要添加转义字符反斜杠\\。\n\n实例：  \n1）匹配斜杠/\n```\nvar str = \"/public/image/a.png\";\nvar patt = /\\//;\nconsole.log(str.match(patt));\n```\n\n\nvar s = 'http://i2.xxx.com/wx/images_2016/monkey/m4_1e3thtr.png';\nvar r = /(\\/(?!.*\\/).+)/;\nvar m = s.match(r);\n\n/([^/]*)$/;\n\n","source":"_posts/正则表达式.md","raw":"---\nlayout: post\ntitle: 正则表达式\ncategory : JS\ntagline: \"Supporting tagline\"\ntags : [JS]\ndescription: Git作为一种流行的版本管理系统已经广泛应用于我们的日常开发中，在这里记录下日常遇到的关于git的常见用法，以备后续查询。\ndate: 2017-7-24 23:30:09\n---\n\n##### 基本概念\n\n- 正则表达式\n  它描述了一种字符串匹配的模式，可以用来检查一个字符串是否包含\n```\n基本概念：\n元字符：在正则表达式中具有特殊含义的字符。\n```\n( ) [ ] { { \\ ^ $ | ? * + . < > - = !\n```\n\n子模式： 在正则表达式中，可以使用括号()将模式中的子字符串括起来，以形成一个子模式。将子模式视为一个整体时，那么它就相当于一个单个字符。\n\n正则表达式是包含在 两个斜杠之间 的一个或多个字符，在后一个斜杠的后面，可以指定一个或多个选项。\n\n var regExp = /pattern/flags\n其中，“pattern”为指定的匹配模式，flags为 0个 或多个可选项，这些选项及其含义如下：\n\ni：表示忽略大小写，就是在字符串匹配的时候不区分大小写。\ng：表示全局匹配，即匹配字符串中出现的所有模式。\nm：表示进行多行匹配。\n\n\n\nrunoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。\n\nrunoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。\n\ncolou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。\n\n\n\n所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \\: runo\\*ob 匹配 runo*ob。\n\n许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符\"转义\"，即，将反斜杠字符\\ 放在它们前面。下表列出了正则表达式中的特殊字符：\n\n\nvar str = \"123abc\";\nvar patt1 = /^[0-9]+abc$/;\nconsole.log(str.match(patt1)[0]);\n```\n\n^ 为匹配输入字符串的开始位置。\n\n[0-9]+匹配多个数字， [0-9] 匹配单个数字，+ 匹配一个或者多个。\n\nabc$匹配字母 abc 并以 abc 结尾，$ 为匹配输入字符串的结束位置。\n\n\n#### 常用符号的用法\n\n- \\ 标记其后的字符为特殊字符、转义字符\n  \n  如\\r代表回车符，\\b表示一个字符边界，反斜杠\\也可以将其后的特殊字符，转义为字面量,例如，模式 /a*/ 代表会匹配 0 个或者多个 a。相反，模式 /a\\*/ 将 '*' 的特殊性移除，从而可以匹配像 \"a*\" 这样的字符串。\\\\表示一个\\,第一个\\为转义字符，第二个\\为特殊字符\\。\n  \n- ^ 匹配输入的开始位置\n  如果多行标志为true时也匹配换行符后紧跟的位置。\n  \n  匹配以snow开头的字符串\n  ```\n  //如下patt/^snow/匹配snow is my name但不匹配my name is snow\n  var str = \"snow is my name\";\n  var patt = /^snow/;\n  console.log(str.match(patt));\n  ```\n- $ 匹配输入结束的位置\n  匹配输入的结束。如果多行标示为true时也匹配换行符前的位置。\n  匹配以snow结尾的字符串\n  ```\n  //如下patt/snow$/匹配my name is snow但不匹配snow is my name\n  var str = \"my name is snow\";\n  var patt = /snow$/;\n  console.log(str.match(patt));\n  ```\n  匹配snow这个字符串, 如下^$结合可以匹配snow(仅匹配snow，不匹配snow is snow)\n  ```\n  var str = \"snow\";\n  var patt = /^snow$/;\n  console.log(str.match(patt));\n  ```\n\n- | 类似与或，指明两项之间的一个选择\n  \n  匹配苹果或香蕉\n  ```\n  var str = \"banana\";\n  var patt = /apple|banana/;\n  console.log(str.match(patt));\n  ```\n- {n} 匹配前一项连续出现n次\n  如，/p{2}/不会匹配aple中的a,但会匹配apple中所有的p。\n  ```\n  var str = \"apple is a apple\";\n  var patt = /(apple){2}/;\n  console.log(str.match(patt)); => null\n\n  var str = \"appleapple 2 apple\";\n  var patt = /(apple){2}/;\n  console.log(str.match(patt)); => appleapple\n  ```\n- {m,n} 匹配前一项连续出现m到n次，包括m、n次\n    ```\n  var str = \"apple is a apple\";\n  var patt = /(apple){2,3}/;\n  console.log(str.match(patt)); => null\n\n  var str = \"appleapple 2 apple\";\n  var patt = /(apple){2,3}/;\n  console.log(str.match(patt)); => appleapple\n  ```\n- . 默认情况下, 句点匹配除新行符(换行符`\\n`和回车符`\\r`)外的任何单个字符\n\n  匹配snow_，如下/snow./可以匹配snow1，snowa，snow_等。\n  ```\n  var str = \"snow_\";\n  var patt = /snow./;\n  console.log(str.match(patt));\n  ```\n\n- * 匹配零个或多个前一项,等价于 {0,}。\n\n  匹配a，如下a*可以匹配aabc，aaaabc，甚至不包含 \"a\" 的任意字符串.\n  ```\n  var str = \"aaaabaac\";\n  var patt = /ba*/;\n  console.log(str.match(patt)) => baa\n  ```\n  通配符: 句点星号模式 .* 可以匹配零个或多个任意字符 (除了新行符: `r 和 `n). 例如, snow.*123 可以匹配 snowAnything123, 也能匹配 snow123.\n\n- +匹配前一项一个或多个,等价于 {1,}。 \n  例如，/p+/匹配了在 \"apppppple\" 中的 'p'，和在 \"caaaaaaandy\" 中所有的 'a'。\n  \n- ? 匹配零个或一个前面的字符，可以理解为\"前面的那项是可选的\". 例如, colou?r 可以匹配 color    和 colour, 因为 \"u\" 是可选的, abcd(efg)?hij可以匹配abchij和abcdefghij。\n\n\n- () 标记一个子表达式(分组)的开始和结束位置\n  每一个子表达式会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推\n  子表达式的结果可以获取供以后使用, 如下子表达式的值为phone\n  匹配apple出现了多次\n  ```\n  var str = \"apple is a iphone\";\n  var patt = /i(phone$)/;\n  console.log(str.match(patt));\n  => [ 'iphone', 'phone', index: 11, input: 'apple is a iphone' ]\n\n  var str = \"there is a iphonePlus called iphonePlus\";\n  var patt = /(iphone)(Plus).*\\1\\2$/; //\\1、\\2表示子表达式1、2的结果，及iphone、Plus\n  console.log(str.match(patt));\n  => [ 'iphonePlus called iphonePlus',\n       'iphone',\n       'Plus',\n       index: 11,\n       input: 'there is a iphonePlus called iphonePlus' ]\n\n  ```\n\n- (x) 匹配 'x' 并且记住匹配项，括号被称为 捕获括号。\n  ```\n  var str = \"there is a iphone called iphone\";\n  var patt = /(iphone).*\\1$/; //因为记住了匹配项，所有\\1能够拿到子表达式1的结果iphone\n  console.log(str.match(patt));\n  =>[ 'iphone called iphone',\n  'iphone',\n  index: 11,\n  input: 'there is a iphone called iphone' ]\n  ```\n\n- (?:x) 匹配 'x' 但是不记住匹配项。这种叫作非捕获括号\n  ```\n  var str = \"there is a iphone called iphone\";\n  var patt = /(?:iphone).*\\1$/; //因为没有记住匹配项，所有\\1不能拿到子表达式1的结果，匹配为null\n  console.log(str.match(patt));\n  =>null\n  ```\n- x(?=y)\t匹配'x'仅仅当'x'后面跟着'y'.这种叫做正向肯定查找。\n  ```\n var str = \"iphoneX and iphonePlus\";\n  var patt = /iphone(?=Plus)/; //匹配iphonePlus的iphone\n  console.log(str.match(patt));\n  =>[ 'iphone', index: 12, input: 'iphoneX and iphonePlus' ]\n  ```\n\n- x(?!y)匹配'x'仅仅当'x'后面不跟着'y',这个叫做正向否定查找。\n\n```\nvar str = \"iphoneX and iphonePlus\";\nvar patt = /iphone(?!Plus)/;//匹配iphoneX的iphone\nconsole.log(str.match(patt));\n=> [ 'iphone', index: 0, input: 'iphoneX and iphonePlus' ]\n```\n- [xyz]\n字符类：元字符[ 和 ]指定正则表达式中的字符类。\n字符类“[123]\"将匹配字符1，2或3.例如，字符串“man\"或“men\"将匹配正则表达式“m[ae]n\"。\n可以使用连字符-来指定字符范围，如[A-Z]表示所有大写任何字母;[0-9]表示0和9之间的任何数字。[a-ex-z]\t字符a到d或x到z，其将包括a，b，c，d, x，y或z。\n- [^xyz]\n一个反向字符集。^表示除也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。\n\n[^abc][^a-c] \t除a，b和c以外的字符\n\n- [\\b] 匹配一个退格(U+0008)。（不要和\\b混淆了。）\n\n- \\b 匹配一个单词的边界，一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者没有其他“字”字符在其前面的位置\n\n例子：\n\n/\\bm/匹配“moon”中得‘m’；\n\n/oo\\b/并不匹配\"moon\"中得'oo'，因为'oo'被一个“字”字符'n'紧跟着。\n\n/oon\\b/匹配\"moon\"中得'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。\n\n\\B 匹配一个非单词边界\n例如，/\\Bday/匹配\"noonday\"中的'oon', 而/y\\B./匹配\"possibly yesterday\"中的’ye‘\n\n- \\d\t\n匹配一个数字。\n\n等价于[0-9]。\n\n例如， /\\d/ 或者 /[0-9]/ 匹配\"B2 is the suite number.\"中的'2'。\n\n\\D\t\n匹配一个非数字字符。\n\n等价于[^0-9]。\n\n例如， /\\D/ 或者 /[^0-9]/ 匹配\"B2 is the suite number.\"中的'B' 。\n\n\\f\t匹配一个换页符 (U+000C)。\n\\n\t匹配一个换行符 (U+000A)。\n\\r\t匹配一个回车符 (U+000D)。\n\\s\t\n匹配一个空白字符，包括空格、制表符、换页符和换行符。\n\n等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n例如, /\\s\\w*/ 匹配\"foo bar.\"中的' bar'。\n\n\\S\t\n匹配一个非空白字符。\n\n等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n例如， /\\S\\w*/ 匹配\"foo bar.\"中的'foo'。\n\n\\t\t匹配一个水平制表符 (U+0009)。\n\\v\t匹配一个垂直制表符 (U+000B)。\n\\w\t\n匹配一个单字字符（字母、数字或者下划线）。\n\n等价于[A-Za-z0-9_]。\n\n例如, /\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。\n\n\\W\t\n匹配一个非单字字符。\n\n等价于[^A-Za-z0-9_]。\n\n例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 \"50%.\" 中的 '%'。\n\n\\n\t\n在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。\n\n比如 /apple(,)\\sorange\\1/ 匹配\"apple, orange, cherry, peach.\"中的'apple, orange,' 。\n\n\\0\t匹配 NULL (U+0000) 字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。\n\\xhh\t与代码 hh 匹配字符（两个十六进制数字）\n\\uhhhh\t与代码 hhhh 匹配字符（四个十六进制数字）。\n\n- ?#comment注释\n```\nvar patt = /\\/(?#匹配斜杠/)/;\n```\n\n\n\n\n匹配特殊字符(\\.*?+[{|()^$等)需要添加转义字符反斜杠\\。\n\n实例：  \n1）匹配斜杠/\n```\nvar str = \"/public/image/a.png\";\nvar patt = /\\//;\nconsole.log(str.match(patt));\n```\n\n\nvar s = 'http://i2.xxx.com/wx/images_2016/monkey/m4_1e3thtr.png';\nvar r = /(\\/(?!.*\\/).+)/;\nvar m = s.match(r);\n\n/([^/]*)$/;\n\n","slug":"正则表达式","published":1,"updated":"2018-06-29T08:21:03.000Z","comments":1,"photos":[],"link":"","_id":"cjj9krdp40006io0re4dqflxu","content":"<h5 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h5><ul>\n<li>正则表达式<br>它描述了一种字符串匹配的模式，可以用来检查一个字符串是否包含<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本概念：</span><br><span class=\"line\">元字符：在正则表达式中具有特殊含义的字符。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>( ) [ ] { { \\ ^ $ | ? * + . &lt; &gt; - = !<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">子模式： 在正则表达式中，可以使用括号()将模式中的子字符串括起来，以形成一个子模式。将子模式视为一个整体时，那么它就相当于一个单个字符。</span><br><span class=\"line\"></span><br><span class=\"line\">正则表达式是包含在 两个斜杠之间 的一个或多个字符，在后一个斜杠的后面，可以指定一个或多个选项。</span><br><span class=\"line\"></span><br><span class=\"line\"> var regExp = /pattern/flags</span><br><span class=\"line\">其中，“pattern”为指定的匹配模式，flags为 0个 或多个可选项，这些选项及其含义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">i：表示忽略大小写，就是在字符串匹配的时候不区分大小写。</span><br><span class=\"line\">g：表示全局匹配，即匹配字符串中出现的所有模式。</span><br><span class=\"line\">m：表示进行多行匹配。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</span><br><span class=\"line\"></span><br><span class=\"line\">runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</span><br><span class=\"line\"></span><br><span class=\"line\">colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \\: runo\\*ob 匹配 runo*ob。</span><br><span class=\"line\"></span><br><span class=\"line\">许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符&quot;转义&quot;，即，将反斜杠字符\\ 放在它们前面。下表列出了正则表达式中的特殊字符：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;123abc&quot;;</span><br><span class=\"line\">var patt1 = /^[0-9]+abc$/;</span><br><span class=\"line\">console.log(str.match(patt1)[0]);</span><br></pre></td></tr></table></figure></p>\n<p>^ 为匹配输入字符串的开始位置。</p>\n<p>[0-9]+匹配多个数字， [0-9] 匹配单个数字，+ 匹配一个或者多个。</p>\n<p>abc$匹配字母 abc 并以 abc 结尾，$ 为匹配输入字符串的结束位置。</p>\n<h4 id=\"常用符号的用法\"><a href=\"#常用符号的用法\" class=\"headerlink\" title=\"常用符号的用法\"></a>常用符号的用法</h4><ul>\n<li><p>\\ 标记其后的字符为特殊字符、转义字符</p>\n<p>如\\r代表回车符，\\b表示一个字符边界，反斜杠\\也可以将其后的特殊字符，转义为字面量,例如，模式 /a<em>/ 代表会匹配 0 个或者多个 a。相反，模式 /a\\</em>/ 将 ‘<em>‘ 的特殊性移除，从而可以匹配像 “a</em>“ 这样的字符串。\\表示一个\\,第一个\\为转义字符，第二个\\为特殊字符\\。</p>\n</li>\n<li><p>^ 匹配输入的开始位置<br>如果多行标志为true时也匹配换行符后紧跟的位置。</p>\n<p>匹配以snow开头的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如下patt/^snow/匹配snow is my name但不匹配my name is snow</span><br><span class=\"line\">var str = &quot;snow is my name&quot;;</span><br><span class=\"line\">var patt = /^snow/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>$ 匹配输入结束的位置<br>匹配输入的结束。如果多行标示为true时也匹配换行符前的位置。<br>匹配以snow结尾的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如下patt/snow$/匹配my name is snow但不匹配snow is my name</span><br><span class=\"line\">var str = &quot;my name is snow&quot;;</span><br><span class=\"line\">var patt = /snow$/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n<p>匹配snow这个字符串, 如下^$结合可以匹配snow(仅匹配snow，不匹配snow is snow)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;snow&quot;;</span><br><span class=\"line\">var patt = /^snow$/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>| 类似与或，指明两项之间的一个选择</p>\n<p>匹配苹果或香蕉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;banana&quot;;</span><br><span class=\"line\">var patt = /apple|banana/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>{n} 匹配前一项连续出现n次<br>如，/p{2}/不会匹配aple中的a,但会匹配apple中所有的p。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;apple is a apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; null</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;appleapple 2 apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; appleapple</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>{m,n} 匹配前一项连续出现m到n次，包括m、n次</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;apple is a apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2,3&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; null</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;appleapple 2 apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2,3&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; appleapple</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>. 默认情况下, 句点匹配除新行符(换行符<code>\\n</code>和回车符<code>\\r</code>)外的任何单个字符</p>\n<p>匹配snow<em>，如下/snow./可以匹配snow1，snowa，snow</em>等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;snow_&quot;;</span><br><span class=\"line\">var patt = /snow./;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><ul>\n<li>匹配零个或多个前一项,等价于 {0,}。</li>\n</ul>\n<p>匹配a，如下a*可以匹配aabc，aaaabc，甚至不包含 “a” 的任意字符串.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;aaaabaac&quot;;</span><br><span class=\"line\">var patt = /ba*/;</span><br><span class=\"line\">console.log(str.match(patt)) =&gt; baa</span><br></pre></td></tr></table></figure>\n<p>通配符: 句点星号模式 .<em> 可以匹配零个或多个任意字符 (除了新行符: <code>r 和</code>n). 例如, snow.</em>123 可以匹配 snowAnything123, 也能匹配 snow123.</p>\n</li>\n<li><p>+匹配前一项一个或多个,等价于 {1,}。<br>例如，/p+/匹配了在 “apppppple” 中的 ‘p’，和在 “caaaaaaandy” 中所有的 ‘a’。</p>\n</li>\n<li><p>? 匹配零个或一个前面的字符，可以理解为”前面的那项是可选的”. 例如, colou?r 可以匹配 color    和 colour, 因为 “u” 是可选的, abcd(efg)?hij可以匹配abchij和abcdefghij。</p>\n</li>\n</ul>\n<ul>\n<li><p>() 标记一个子表达式(分组)的开始和结束位置<br>每一个子表达式会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推<br>子表达式的结果可以获取供以后使用, 如下子表达式的值为phone<br>匹配apple出现了多次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;apple is a iphone&quot;;</span><br><span class=\"line\">var patt = /i(phone$)/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt; [ &apos;iphone&apos;, &apos;phone&apos;, index: 11, input: &apos;apple is a iphone&apos; ]</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;there is a iphonePlus called iphonePlus&quot;;</span><br><span class=\"line\">var patt = /(iphone)(Plus).*\\1\\2$/; //\\1、\\2表示子表达式1、2的结果，及iphone、Plus</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt; [ &apos;iphonePlus called iphonePlus&apos;,</span><br><span class=\"line\">     &apos;iphone&apos;,</span><br><span class=\"line\">     &apos;Plus&apos;,</span><br><span class=\"line\">     index: 11,</span><br><span class=\"line\">     input: &apos;there is a iphonePlus called iphonePlus&apos; ]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(x) 匹配 ‘x’ 并且记住匹配项，括号被称为 捕获括号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;there is a iphone called iphone&quot;;</span><br><span class=\"line\">var patt = /(iphone).*\\1$/; //因为记住了匹配项，所有\\1能够拿到子表达式1的结果iphone</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt;[ &apos;iphone called iphone&apos;,</span><br><span class=\"line\">&apos;iphone&apos;,</span><br><span class=\"line\">index: 11,</span><br><span class=\"line\">input: &apos;there is a iphone called iphone&apos; ]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(?:x) 匹配 ‘x’ 但是不记住匹配项。这种叫作非捕获括号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;there is a iphone called iphone&quot;;</span><br><span class=\"line\">var patt = /(?:iphone).*\\1$/; //因为没有记住匹配项，所有\\1不能拿到子表达式1的结果，匹配为null</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt;null</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>x(?=y)    匹配’x’仅仅当’x’后面跟着’y’.这种叫做正向肯定查找。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;iphoneX and iphonePlus&quot;;</span><br><span class=\"line\"> var patt = /iphone(?=Plus)/; //匹配iphonePlus的iphone</span><br><span class=\"line\"> console.log(str.match(patt));</span><br><span class=\"line\"> =&gt;[ &apos;iphone&apos;, index: 12, input: &apos;iphoneX and iphonePlus&apos; ]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>x(?!y)匹配’x’仅仅当’x’后面不跟着’y’,这个叫做正向否定查找。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;iphoneX and iphonePlus&quot;;</span><br><span class=\"line\">var patt = /iphone(?!Plus)/;//匹配iphoneX的iphone</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt; [ &apos;iphone&apos;, index: 0, input: &apos;iphoneX and iphonePlus&apos; ]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[xyz]<br>字符类：元字符[ 和 ]指定正则表达式中的字符类。<br>字符类“[123]”将匹配字符1，2或3.例如，字符串“man”或“men”将匹配正则表达式“m[ae]n”。<br>可以使用连字符-来指定字符范围，如[A-Z]表示所有大写任何字母;[0-9]表示0和9之间的任何数字。[a-ex-z]    字符a到d或x到z，其将包括a，b，c，d, x，y或z。</li>\n<li>[^xyz]<br>一个反向字符集。^表示除也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。</li>\n</ul>\n<p>[^abc][^a-c]     除a，b和c以外的字符</p>\n<ul>\n<li><p>[\\b] 匹配一个退格(U+0008)。（不要和\\b混淆了。）</p>\n</li>\n<li><p>\\b 匹配一个单词的边界，一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者没有其他“字”字符在其前面的位置</p>\n</li>\n</ul>\n<p>例子：</p>\n<p>/\\bm/匹配“moon”中得‘m’；</p>\n<p>/oo\\b/并不匹配”moon”中得’oo’，因为’oo’被一个“字”字符’n’紧跟着。</p>\n<p>/oon\\b/匹配”moon”中得’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。</p>\n<p>\\B 匹配一个非单词边界<br>例如，/\\Bday/匹配”noonday”中的’oon’, 而/y\\B./匹配”possibly yesterday”中的’ye‘</p>\n<ul>\n<li>\\d<br>匹配一个数字。</li>\n</ul>\n<p>等价于[0-9]。</p>\n<p>例如， /\\d/ 或者 /[0-9]/ 匹配”B2 is the suite number.”中的’2’。</p>\n<p>\\D<br>匹配一个非数字字符。</p>\n<p>等价于[^0-9]。</p>\n<p>例如， /\\D/ 或者 /[^0-9]/ 匹配”B2 is the suite number.”中的’B’ 。</p>\n<p>\\f    匹配一个换页符 (U+000C)。<br>\\n    匹配一个换行符 (U+000A)。<br>\\r    匹配一个回车符 (U+000D)。<br>\\s<br>匹配一个空白字符，包括空格、制表符、换页符和换行符。</p>\n<p>等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</p>\n<p>例如, /\\s\\w*/ 匹配”foo bar.”中的’ bar’。</p>\n<p>\\S<br>匹配一个非空白字符。</p>\n<p>等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</p>\n<p>例如， /\\S\\w*/ 匹配”foo bar.”中的’foo’。</p>\n<p>\\t    匹配一个水平制表符 (U+0009)。<br>\\v    匹配一个垂直制表符 (U+000B)。<br>\\w<br>匹配一个单字字符（字母、数字或者下划线）。</p>\n<p>等价于[A-Za-z0-9_]。</p>\n<p>例如, /\\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p>\n<p>\\W<br>匹配一个非单字字符。</p>\n<p>等价于[^A-Za-z0-9_]。</p>\n<p>例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 “50%.” 中的 ‘%’。</p>\n<p>\\n<br>在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。</p>\n<p>比如 /apple(,)\\sorange\\1/ 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</p>\n<p>\\0    匹配 NULL (U+0000) 字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。<br>\\xhh    与代码 hh 匹配字符（两个十六进制数字）<br>\\uhhhh    与代码 hhhh 匹配字符（四个十六进制数字）。</digits></p>\n<ul>\n<li>?#comment注释<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var patt = /\\/(?#匹配斜杠/)/;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>匹配特殊字符(.*?+[{|()^$等)需要添加转义字符反斜杠\\。</p>\n<p>实例：<br>1）匹配斜杠/<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;/public/image/a.png&quot;;</span><br><span class=\"line\">var patt = /\\//;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure></p>\n<p>var s = ‘<a href=\"http://i2.xxx.com/wx/images_2016/monkey/m4_1e3thtr.png\" target=\"_blank\" rel=\"noopener\">http://i2.xxx.com/wx/images_2016/monkey/m4_1e3thtr.png</a>‘;<br>var r = /(\\/(?!.*\\/).+)/;<br>var m = s.match(r);</p>\n<p>/([^/]*)$/;</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h5><ul>\n<li>正则表达式<br>它描述了一种字符串匹配的模式，可以用来检查一个字符串是否包含<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本概念：</span><br><span class=\"line\">元字符：在正则表达式中具有特殊含义的字符。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>( ) [ ] { { \\ ^ $ | ? * + . &lt; &gt; - = !<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">子模式： 在正则表达式中，可以使用括号()将模式中的子字符串括起来，以形成一个子模式。将子模式视为一个整体时，那么它就相当于一个单个字符。</span><br><span class=\"line\"></span><br><span class=\"line\">正则表达式是包含在 两个斜杠之间 的一个或多个字符，在后一个斜杠的后面，可以指定一个或多个选项。</span><br><span class=\"line\"></span><br><span class=\"line\"> var regExp = /pattern/flags</span><br><span class=\"line\">其中，“pattern”为指定的匹配模式，flags为 0个 或多个可选项，这些选项及其含义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">i：表示忽略大小写，就是在字符串匹配的时候不区分大小写。</span><br><span class=\"line\">g：表示全局匹配，即匹配字符串中出现的所有模式。</span><br><span class=\"line\">m：表示进行多行匹配。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</span><br><span class=\"line\"></span><br><span class=\"line\">runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</span><br><span class=\"line\"></span><br><span class=\"line\">colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \\: runo\\*ob 匹配 runo*ob。</span><br><span class=\"line\"></span><br><span class=\"line\">许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符&quot;转义&quot;，即，将反斜杠字符\\ 放在它们前面。下表列出了正则表达式中的特殊字符：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;123abc&quot;;</span><br><span class=\"line\">var patt1 = /^[0-9]+abc$/;</span><br><span class=\"line\">console.log(str.match(patt1)[0]);</span><br></pre></td></tr></table></figure></p>\n<p>^ 为匹配输入字符串的开始位置。</p>\n<p>[0-9]+匹配多个数字， [0-9] 匹配单个数字，+ 匹配一个或者多个。</p>\n<p>abc$匹配字母 abc 并以 abc 结尾，$ 为匹配输入字符串的结束位置。</p>\n<h4 id=\"常用符号的用法\"><a href=\"#常用符号的用法\" class=\"headerlink\" title=\"常用符号的用法\"></a>常用符号的用法</h4><ul>\n<li><p>\\ 标记其后的字符为特殊字符、转义字符</p>\n<p>如\\r代表回车符，\\b表示一个字符边界，反斜杠\\也可以将其后的特殊字符，转义为字面量,例如，模式 /a<em>/ 代表会匹配 0 个或者多个 a。相反，模式 /a\\</em>/ 将 ‘<em>‘ 的特殊性移除，从而可以匹配像 “a</em>“ 这样的字符串。\\表示一个\\,第一个\\为转义字符，第二个\\为特殊字符\\。</p>\n</li>\n<li><p>^ 匹配输入的开始位置<br>如果多行标志为true时也匹配换行符后紧跟的位置。</p>\n<p>匹配以snow开头的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如下patt/^snow/匹配snow is my name但不匹配my name is snow</span><br><span class=\"line\">var str = &quot;snow is my name&quot;;</span><br><span class=\"line\">var patt = /^snow/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>$ 匹配输入结束的位置<br>匹配输入的结束。如果多行标示为true时也匹配换行符前的位置。<br>匹配以snow结尾的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如下patt/snow$/匹配my name is snow但不匹配snow is my name</span><br><span class=\"line\">var str = &quot;my name is snow&quot;;</span><br><span class=\"line\">var patt = /snow$/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n<p>匹配snow这个字符串, 如下^$结合可以匹配snow(仅匹配snow，不匹配snow is snow)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;snow&quot;;</span><br><span class=\"line\">var patt = /^snow$/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>| 类似与或，指明两项之间的一个选择</p>\n<p>匹配苹果或香蕉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;banana&quot;;</span><br><span class=\"line\">var patt = /apple|banana/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>{n} 匹配前一项连续出现n次<br>如，/p{2}/不会匹配aple中的a,但会匹配apple中所有的p。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;apple is a apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; null</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;appleapple 2 apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; appleapple</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>{m,n} 匹配前一项连续出现m到n次，包括m、n次</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;apple is a apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2,3&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; null</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;appleapple 2 apple&quot;;</span><br><span class=\"line\">var patt = /(apple)&#123;2,3&#125;/;</span><br><span class=\"line\">console.log(str.match(patt)); =&gt; appleapple</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>. 默认情况下, 句点匹配除新行符(换行符<code>\\n</code>和回车符<code>\\r</code>)外的任何单个字符</p>\n<p>匹配snow<em>，如下/snow./可以匹配snow1，snowa，snow</em>等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;snow_&quot;;</span><br><span class=\"line\">var patt = /snow./;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure>\n</li>\n<li><ul>\n<li>匹配零个或多个前一项,等价于 {0,}。</li>\n</ul>\n<p>匹配a，如下a*可以匹配aabc，aaaabc，甚至不包含 “a” 的任意字符串.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;aaaabaac&quot;;</span><br><span class=\"line\">var patt = /ba*/;</span><br><span class=\"line\">console.log(str.match(patt)) =&gt; baa</span><br></pre></td></tr></table></figure>\n<p>通配符: 句点星号模式 .<em> 可以匹配零个或多个任意字符 (除了新行符: <code>r 和</code>n). 例如, snow.</em>123 可以匹配 snowAnything123, 也能匹配 snow123.</p>\n</li>\n<li><p>+匹配前一项一个或多个,等价于 {1,}。<br>例如，/p+/匹配了在 “apppppple” 中的 ‘p’，和在 “caaaaaaandy” 中所有的 ‘a’。</p>\n</li>\n<li><p>? 匹配零个或一个前面的字符，可以理解为”前面的那项是可选的”. 例如, colou?r 可以匹配 color    和 colour, 因为 “u” 是可选的, abcd(efg)?hij可以匹配abchij和abcdefghij。</p>\n</li>\n</ul>\n<ul>\n<li><p>() 标记一个子表达式(分组)的开始和结束位置<br>每一个子表达式会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推<br>子表达式的结果可以获取供以后使用, 如下子表达式的值为phone<br>匹配apple出现了多次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;apple is a iphone&quot;;</span><br><span class=\"line\">var patt = /i(phone$)/;</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt; [ &apos;iphone&apos;, &apos;phone&apos;, index: 11, input: &apos;apple is a iphone&apos; ]</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &quot;there is a iphonePlus called iphonePlus&quot;;</span><br><span class=\"line\">var patt = /(iphone)(Plus).*\\1\\2$/; //\\1、\\2表示子表达式1、2的结果，及iphone、Plus</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt; [ &apos;iphonePlus called iphonePlus&apos;,</span><br><span class=\"line\">     &apos;iphone&apos;,</span><br><span class=\"line\">     &apos;Plus&apos;,</span><br><span class=\"line\">     index: 11,</span><br><span class=\"line\">     input: &apos;there is a iphonePlus called iphonePlus&apos; ]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(x) 匹配 ‘x’ 并且记住匹配项，括号被称为 捕获括号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;there is a iphone called iphone&quot;;</span><br><span class=\"line\">var patt = /(iphone).*\\1$/; //因为记住了匹配项，所有\\1能够拿到子表达式1的结果iphone</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt;[ &apos;iphone called iphone&apos;,</span><br><span class=\"line\">&apos;iphone&apos;,</span><br><span class=\"line\">index: 11,</span><br><span class=\"line\">input: &apos;there is a iphone called iphone&apos; ]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(?:x) 匹配 ‘x’ 但是不记住匹配项。这种叫作非捕获括号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;there is a iphone called iphone&quot;;</span><br><span class=\"line\">var patt = /(?:iphone).*\\1$/; //因为没有记住匹配项，所有\\1不能拿到子表达式1的结果，匹配为null</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt;null</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>x(?=y)    匹配’x’仅仅当’x’后面跟着’y’.这种叫做正向肯定查找。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;iphoneX and iphonePlus&quot;;</span><br><span class=\"line\"> var patt = /iphone(?=Plus)/; //匹配iphonePlus的iphone</span><br><span class=\"line\"> console.log(str.match(patt));</span><br><span class=\"line\"> =&gt;[ &apos;iphone&apos;, index: 12, input: &apos;iphoneX and iphonePlus&apos; ]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>x(?!y)匹配’x’仅仅当’x’后面不跟着’y’,这个叫做正向否定查找。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;iphoneX and iphonePlus&quot;;</span><br><span class=\"line\">var patt = /iphone(?!Plus)/;//匹配iphoneX的iphone</span><br><span class=\"line\">console.log(str.match(patt));</span><br><span class=\"line\">=&gt; [ &apos;iphone&apos;, index: 0, input: &apos;iphoneX and iphonePlus&apos; ]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[xyz]<br>字符类：元字符[ 和 ]指定正则表达式中的字符类。<br>字符类“[123]”将匹配字符1，2或3.例如，字符串“man”或“men”将匹配正则表达式“m[ae]n”。<br>可以使用连字符-来指定字符范围，如[A-Z]表示所有大写任何字母;[0-9]表示0和9之间的任何数字。[a-ex-z]    字符a到d或x到z，其将包括a，b，c，d, x，y或z。</li>\n<li>[^xyz]<br>一个反向字符集。^表示除也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。</li>\n</ul>\n<p>[^abc][^a-c]     除a，b和c以外的字符</p>\n<ul>\n<li><p>[\\b] 匹配一个退格(U+0008)。（不要和\\b混淆了。）</p>\n</li>\n<li><p>\\b 匹配一个单词的边界，一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者没有其他“字”字符在其前面的位置</p>\n</li>\n</ul>\n<p>例子：</p>\n<p>/\\bm/匹配“moon”中得‘m’；</p>\n<p>/oo\\b/并不匹配”moon”中得’oo’，因为’oo’被一个“字”字符’n’紧跟着。</p>\n<p>/oon\\b/匹配”moon”中得’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。</p>\n<p>\\B 匹配一个非单词边界<br>例如，/\\Bday/匹配”noonday”中的’oon’, 而/y\\B./匹配”possibly yesterday”中的’ye‘</p>\n<ul>\n<li>\\d<br>匹配一个数字。</li>\n</ul>\n<p>等价于[0-9]。</p>\n<p>例如， /\\d/ 或者 /[0-9]/ 匹配”B2 is the suite number.”中的’2’。</p>\n<p>\\D<br>匹配一个非数字字符。</p>\n<p>等价于[^0-9]。</p>\n<p>例如， /\\D/ 或者 /[^0-9]/ 匹配”B2 is the suite number.”中的’B’ 。</p>\n<p>\\f    匹配一个换页符 (U+000C)。<br>\\n    匹配一个换行符 (U+000A)。<br>\\r    匹配一个回车符 (U+000D)。<br>\\s<br>匹配一个空白字符，包括空格、制表符、换页符和换行符。</p>\n<p>等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</p>\n<p>例如, /\\s\\w*/ 匹配”foo bar.”中的’ bar’。</p>\n<p>\\S<br>匹配一个非空白字符。</p>\n<p>等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</p>\n<p>例如， /\\S\\w*/ 匹配”foo bar.”中的’foo’。</p>\n<p>\\t    匹配一个水平制表符 (U+0009)。<br>\\v    匹配一个垂直制表符 (U+000B)。<br>\\w<br>匹配一个单字字符（字母、数字或者下划线）。</p>\n<p>等价于[A-Za-z0-9_]。</p>\n<p>例如, /\\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p>\n<p>\\W<br>匹配一个非单字字符。</p>\n<p>等价于[^A-Za-z0-9_]。</p>\n<p>例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 “50%.” 中的 ‘%’。</p>\n<p>\\n<br>在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。</p>\n<p>比如 /apple(,)\\sorange\\1/ 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</p>\n<p>\\0    匹配 NULL (U+0000) 字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。<br>\\xhh    与代码 hh 匹配字符（两个十六进制数字）<br>\\uhhhh    与代码 hhhh 匹配字符（四个十六进制数字）。</digits></p>\n<ul>\n<li>?#comment注释<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var patt = /\\/(?#匹配斜杠/)/;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>匹配特殊字符(.*?+[{|()^$等)需要添加转义字符反斜杠\\。</p>\n<p>实例：<br>1）匹配斜杠/<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;/public/image/a.png&quot;;</span><br><span class=\"line\">var patt = /\\//;</span><br><span class=\"line\">console.log(str.match(patt));</span><br></pre></td></tr></table></figure></p>\n<p>var s = ‘<a href=\"http://i2.xxx.com/wx/images_2016/monkey/m4_1e3thtr.png\" target=\"_blank\" rel=\"noopener\">http://i2.xxx.com/wx/images_2016/monkey/m4_1e3thtr.png</a>‘;<br>var r = /(\\/(?!.*\\/).+)/;<br>var m = s.match(r);</p>\n<p>/([^/]*)$/;</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjj9krdox0001io0ruvufnczu","category_id":"cjj9krdp20003io0rl8c1y2ct","_id":"cjj9krdp9000bio0r55deq7i5"},{"post_id":"cjj9krdp00002io0rhfwlwycn","category_id":"cjj9krdp20003io0rl8c1y2ct","_id":"cjj9krdpa000eio0rbbvdto2h"},{"post_id":"cjj9krdp30005io0r5lywan6c","category_id":"cjj9krdp9000aio0r4nhcy2v5","_id":"cjj9krdpa000iio0rhliuqkqw"},{"post_id":"cjj9krdp40006io0re4dqflxu","category_id":"cjj9krdpa000fio0rvadeplww","_id":"cjj9krdpb000kio0rvt1ypgji"}],"PostTag":[{"post_id":"cjj9krdox0001io0ruvufnczu","tag_id":"cjj9krdp30004io0ri9c5e4ct","_id":"cjj9krdp70009io0rteqyomvy"},{"post_id":"cjj9krdp00002io0rhfwlwycn","tag_id":"cjj9krdp30004io0ri9c5e4ct","_id":"cjj9krdp9000dio0rql1fac6x"},{"post_id":"cjj9krdp30005io0r5lywan6c","tag_id":"cjj9krdp9000cio0roe45719x","_id":"cjj9krdpa000hio0rzqxm1oqx"},{"post_id":"cjj9krdp40006io0re4dqflxu","tag_id":"cjj9krdpa000gio0r6gsfhclf","_id":"cjj9krdpa000jio0r40ih60kh"}],"Tag":[{"name":"Git","_id":"cjj9krdp30004io0ri9c5e4ct"},{"name":"react","_id":"cjj9krdp9000cio0roe45719x"},{"name":"JS","_id":"cjj9krdpa000gio0r6gsfhclf"}]}}